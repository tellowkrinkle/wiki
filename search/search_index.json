{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website . Warnings \u00b6 Some kernel versions, notably 5.8.x and 5.9.x are known to have issues. See the releases (those not marked as a pre-release) of aunali1/linux-mbp-arch for ones that have been tested. Keep in mind that some might very have reached their end of life . Newer versions of iwd currently have issues with non Big Sur patched kernels due to certain p2p related checks missing . If you are experiencing connection issues after following the wifi guide you might want to downgrade to version 1.13 and hold updates for the package. Ubuntu's GRUB is not booting using the Mac Startup Manager on Mac Mini . Thus Mac Mini users are advised to install the rEFInd bootloader and boot GRUB using it instead of the Startup Manager. Getting started \u00b6 To get started with an installation, refer to the roadmap Contact us \u00b6 You may contact us on the Linux on T2 Macs (2018+) Discord Server , where you can find most of the people involved. Notable Resources \u00b6 Distributions \u00b6 Different distributions are maintained by different people in their own repositories. If the distribution you want to use has a guide here , its recommended to follow it instead of the instructions given in one of the repositories or otherwise official documentation by distribution vendor, as it considers t2 support. Arch https://github.com/aunali1/linux-mbp-arch Fedora https://github.com/mikeeq/mbp-fedora Manjaro https://github.com/JPyke3/mbp-manjaro Tails https://github.com/T2minator/mbp-tails Ubuntu https://github.com/marcosfad/mbp-ubuntu Kernel Modules \u00b6 Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support. MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv Guides and similar \u00b6 Note that if you are using one of the distributions listed above you should follow their install guides rather than the ones listed under this section. However they might still be important to gain a better general picture or to help with specific issues. List of Mac Model Identifiers on everymac.com Using Luks with the intergrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Adding macOS like screenshot shortcuts to KDE Plasma https://gist.github.com/networkException/5a68299accc1872749c86301c1449690 Disable thermal throttling (better performance but higher temperatures) https://github.com/yyearth/turnoff-BD-PROCHOT Install a distribution in a virtual machine and copy it to bare metal afterwards https://gist.github.com/Redecorating/c876a4c3b24e47d79c1f921495f62213 (using Pop!_OS as an example) Get SMART information of your Apple Internal SSD using Linux https://gist.github.com/AdityaGarg8/b03e57826213019fbffa747e1c724cac Keyboard related issues https://wiki.archlinux.org/title/Apple_Keyboard Get silent boot experience similar to macOS and Windows on Ubuntu and Arch Linux . Outdated State of Linux on the MacBook Pro (technical documentation) https://github.com/Dunedan/mbp-2016-linux Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 16 inch, 2019 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4 Notable Contributors \u00b6 aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 JPyke3 (Manjaro) https://github.com/JPyke3 marcosfad (Ubuntu) https://github.com/marcosfad MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM mikeeq (Fedora) https://github.com/mikeeq networkException (Wiki maintainence and mbpfan fork for T2) https://github.com/networkException Redecorating (Wiki maintainence and providing compiled kernels with Corellium patch for wifi) https://github.com/Redecorating roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 ... and many more","title":"Home"},{"location":"#introduction","text":"Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website .","title":"Introduction"},{"location":"#warnings","text":"Some kernel versions, notably 5.8.x and 5.9.x are known to have issues. See the releases (those not marked as a pre-release) of aunali1/linux-mbp-arch for ones that have been tested. Keep in mind that some might very have reached their end of life . Newer versions of iwd currently have issues with non Big Sur patched kernels due to certain p2p related checks missing . If you are experiencing connection issues after following the wifi guide you might want to downgrade to version 1.13 and hold updates for the package. Ubuntu's GRUB is not booting using the Mac Startup Manager on Mac Mini . Thus Mac Mini users are advised to install the rEFInd bootloader and boot GRUB using it instead of the Startup Manager.","title":"Warnings"},{"location":"#getting-started","text":"To get started with an installation, refer to the roadmap","title":"Getting started"},{"location":"#contact-us","text":"You may contact us on the Linux on T2 Macs (2018+) Discord Server , where you can find most of the people involved.","title":"Contact us"},{"location":"#notable-resources","text":"","title":"Notable Resources"},{"location":"#distributions","text":"Different distributions are maintained by different people in their own repositories. If the distribution you want to use has a guide here , its recommended to follow it instead of the instructions given in one of the repositories or otherwise official documentation by distribution vendor, as it considers t2 support. Arch https://github.com/aunali1/linux-mbp-arch Fedora https://github.com/mikeeq/mbp-fedora Manjaro https://github.com/JPyke3/mbp-manjaro Tails https://github.com/T2minator/mbp-tails Ubuntu https://github.com/marcosfad/mbp-ubuntu","title":"Distributions"},{"location":"#kernel-modules","text":"Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support. MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv","title":"Kernel Modules"},{"location":"#guides-and-similar","text":"Note that if you are using one of the distributions listed above you should follow their install guides rather than the ones listed under this section. However they might still be important to gain a better general picture or to help with specific issues. List of Mac Model Identifiers on everymac.com Using Luks with the intergrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Adding macOS like screenshot shortcuts to KDE Plasma https://gist.github.com/networkException/5a68299accc1872749c86301c1449690 Disable thermal throttling (better performance but higher temperatures) https://github.com/yyearth/turnoff-BD-PROCHOT Install a distribution in a virtual machine and copy it to bare metal afterwards https://gist.github.com/Redecorating/c876a4c3b24e47d79c1f921495f62213 (using Pop!_OS as an example) Get SMART information of your Apple Internal SSD using Linux https://gist.github.com/AdityaGarg8/b03e57826213019fbffa747e1c724cac Keyboard related issues https://wiki.archlinux.org/title/Apple_Keyboard Get silent boot experience similar to macOS and Windows on Ubuntu and Arch Linux . Outdated State of Linux on the MacBook Pro (technical documentation) https://github.com/Dunedan/mbp-2016-linux Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 16 inch, 2019 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4","title":"Guides and similar"},{"location":"#notable-contributors","text":"aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 JPyke3 (Manjaro) https://github.com/JPyke3 marcosfad (Ubuntu) https://github.com/marcosfad MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM mikeeq (Fedora) https://github.com/mikeeq networkException (Wiki maintainence and mbpfan fork for T2) https://github.com/networkException Redecorating (Wiki maintainence and providing compiled kernels with Corellium patch for wifi) https://github.com/Redecorating roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 ... and many more","title":"Notable Contributors"},{"location":"roadmap/","text":"Introduction \u00b6 This article is meant to guide users through the wiki by giving an overview over the required steps to get to a working installation. Deciding on the Installation \u00b6 Using Linux on a T2 Mac comes with compromises as well as advantages compared to macOS. You will need to decide for yourself if it its worth it. Your first consideration should be the risk you are taking. Don't worry, nobody has broken their machine so far by installing Linux and by following the guides closely you should be able to get everything working even without a lot of knowledge as well. Still in case something goes wrong we are not responsible for it, we will try our best to help out however. Note that while its technically possible to remove macOS entirely, its strongly encouraged to dual boot it with Linux to have a backup in case something goes wrong. Now, take a look at the state article . It gives a list of roughly what works on Linux and what not. If a specific feature is not listed at all, there is a chance it actually works. Choosing a Distribution \u00b6 While technically it is not a limitation when installing Linux, different distributions do provide different levels of documentation, ease of use and polish. Arch Linux probably has the most documentation, both officially for the whole project in form of the Arch Wiki and in scope of the t2linux wiki with a really detailed and up to date install guide. On top of that there is also a work in progress archinstall script. Keep in mind however that the whole process is done in the command line. Manjaro has a more guided install experience, with a graphical installer and multiple prebuilt isos for different desktop environments. Note that Manjaro currently only has 5.7.19 as the latest kernel version. The support period for 5.7.x ended in August 2020. You could install the linux-mbp-arch kernel, which is updated, by following step 8 of the arch install guide , and sudo pacman -S linux-mbp linux-mbp-headers . Ubuntu also has a graphical installer. Additionally, less post configuration work is required as some kernel modules are getting installed automatically. Fedora also has a prebuilt ISO and a graphical installer. Most things work out of the box, though audio and WiFi generally need to be set up as in the guides below. Then they should work flawlessly. If you wish to use another distribution, you can install it normally, also follow the steps to install the kernel yourself manually and follow the post installation steps . Preparing the Installation \u00b6 You will want to look at the wifi guide to check if your model is supported before starting an installation. Based on that information, prepare anything that is needed for installing on Linux. Make sure to keep the wifi firmware, as well as any other files you might want to access after the installation (a password manager database for example) on a medium you can access from Linux. Linux can not read APFS, the file system macOS uses by default. You will also need to make some space on your hard drive. While its technically possible to install Linux on an external drive, it depends on the install process of the distribution if this is supported. 20 to 40 GB should be fine for a base installation. To boot into a live environment, you need to disable secure boot and allow booting from an external device . If your distribution needs a connection to the internet while installing, make sure to prepare an ethernet cable, wifi adapter or phone for tethering. If none of these options are available but your model has wifi support, you can also follow the steps to install firmware in your live environment. Keep in mind that in that case you will still need to follow the guide on your actual install after exiting the live environment. If you want to triple boot with Windows, read the instructions in the triple boot guide before proceeding. Installing \u00b6 Now follow the installation guide of your specific distribution. This wiki provides a set of such guides for different distributions, which can be found here . If the distribution you want to use has such a guide, its recommended to follow it instead of the official documentation by distribution vendor, as it considers t2 support. Configuring the Installation \u00b6 After successfully booting into your new installation, you will need to configure a few things. Install/upgrade drivers for the internal keyboard, trackpad and touchbar: here Getting wifi to work: here Install drivers for the fan (if not working automatically or want to force a certain speed): here Configure audio: here Configure startup manager (optional): here Install rEFInd (optional): here You might also want to look into getting the interal GPU to work if your Mac has two graphics cards. However if you don't need it specifically, its probably best to stick with the dedicated gpu. If your Mac only has a single GPU, you can ignore this anyways.","title":"Installation Roadmap"},{"location":"roadmap/#introduction","text":"This article is meant to guide users through the wiki by giving an overview over the required steps to get to a working installation.","title":"Introduction"},{"location":"roadmap/#deciding-on-the-installation","text":"Using Linux on a T2 Mac comes with compromises as well as advantages compared to macOS. You will need to decide for yourself if it its worth it. Your first consideration should be the risk you are taking. Don't worry, nobody has broken their machine so far by installing Linux and by following the guides closely you should be able to get everything working even without a lot of knowledge as well. Still in case something goes wrong we are not responsible for it, we will try our best to help out however. Note that while its technically possible to remove macOS entirely, its strongly encouraged to dual boot it with Linux to have a backup in case something goes wrong. Now, take a look at the state article . It gives a list of roughly what works on Linux and what not. If a specific feature is not listed at all, there is a chance it actually works.","title":"Deciding on the Installation"},{"location":"roadmap/#choosing-a-distribution","text":"While technically it is not a limitation when installing Linux, different distributions do provide different levels of documentation, ease of use and polish. Arch Linux probably has the most documentation, both officially for the whole project in form of the Arch Wiki and in scope of the t2linux wiki with a really detailed and up to date install guide. On top of that there is also a work in progress archinstall script. Keep in mind however that the whole process is done in the command line. Manjaro has a more guided install experience, with a graphical installer and multiple prebuilt isos for different desktop environments. Note that Manjaro currently only has 5.7.19 as the latest kernel version. The support period for 5.7.x ended in August 2020. You could install the linux-mbp-arch kernel, which is updated, by following step 8 of the arch install guide , and sudo pacman -S linux-mbp linux-mbp-headers . Ubuntu also has a graphical installer. Additionally, less post configuration work is required as some kernel modules are getting installed automatically. Fedora also has a prebuilt ISO and a graphical installer. Most things work out of the box, though audio and WiFi generally need to be set up as in the guides below. Then they should work flawlessly. If you wish to use another distribution, you can install it normally, also follow the steps to install the kernel yourself manually and follow the post installation steps .","title":"Choosing a Distribution"},{"location":"roadmap/#preparing-the-installation","text":"You will want to look at the wifi guide to check if your model is supported before starting an installation. Based on that information, prepare anything that is needed for installing on Linux. Make sure to keep the wifi firmware, as well as any other files you might want to access after the installation (a password manager database for example) on a medium you can access from Linux. Linux can not read APFS, the file system macOS uses by default. You will also need to make some space on your hard drive. While its technically possible to install Linux on an external drive, it depends on the install process of the distribution if this is supported. 20 to 40 GB should be fine for a base installation. To boot into a live environment, you need to disable secure boot and allow booting from an external device . If your distribution needs a connection to the internet while installing, make sure to prepare an ethernet cable, wifi adapter or phone for tethering. If none of these options are available but your model has wifi support, you can also follow the steps to install firmware in your live environment. Keep in mind that in that case you will still need to follow the guide on your actual install after exiting the live environment. If you want to triple boot with Windows, read the instructions in the triple boot guide before proceeding.","title":"Preparing the Installation"},{"location":"roadmap/#installing","text":"Now follow the installation guide of your specific distribution. This wiki provides a set of such guides for different distributions, which can be found here . If the distribution you want to use has such a guide, its recommended to follow it instead of the official documentation by distribution vendor, as it considers t2 support.","title":"Installing"},{"location":"roadmap/#configuring-the-installation","text":"After successfully booting into your new installation, you will need to configure a few things. Install/upgrade drivers for the internal keyboard, trackpad and touchbar: here Getting wifi to work: here Install drivers for the fan (if not working automatically or want to force a certain speed): here Configure audio: here Configure startup manager (optional): here Install rEFInd (optional): here You might also want to look into getting the interal GPU to work if your Mac has two graphics cards. However if you don't need it specifically, its probably best to stick with the dedicated gpu. If your Mac only has a single GPU, you can ignore this anyways.","title":"Configuring the Installation"},{"location":"state/","text":"Introduction \u00b6 While Linux is usable on all T2 models, some features are limited due to the lack of drivers or similar. This page should give a general overview of what is working and what is not. Working \u00b6 Internal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard Camera Wifi (For now its working for all the devices we have data about. There are still some devices of whom we don't have data. Refer to the wifi guide for more details) Partially Working \u00b6 Bluetooth: Not working on models with the BRCM4377 WiFi chip (MacBookPro15,4, MacBookPro16,3, MacBookAir9,1), and models with the BRCM4355 WiFi chip (MacBookAir8,1, MacBookAir8,2). Trackpad: Though it is technically working, it is far from the experience on macOS. No force touch or palm rejection. Some models have deadzones on the edges of their trackpads. Touchbar: There is support for the so called simple mode, the same that you would see on Bootcamp Windows for example. Either function keys from 1 to 12 or basic media / brightness control are shown. Sometimes it is unable to change between function keys and media / brightness keys. Audio: With proper configuration audio can work, however it is not stable in some older kernels and switching between speakers and when using the microphone. Microphone volume is low in some Macs. Suspend is very slow to resume (20-40 seconds), and the Touchbar sometimes does not work after resume. Hybrid Graphics: In case the device has a dedicated AMD GPU (15 and 16 inch models) as well as an Intel iGPU, the iGPU can be used, but this breaks resume, see the Hybrid Graphics page. AMD GPUs: Changing resolution, using DRI_PRIME and doing various other things can cause crashes, but echo high| sudo tee /sys/bus/pci/drivers/amdgpu/0000:??:??.?/power_dpm_force_performance_level or adding the amdgpu.dpm=0 to the kernel commandline stops these crashes. Not working \u00b6 Touch ID, storing encryption keys on the T2 The T2's onboard Audio Video Encoder (used for Sidecar on macOS) Keyboard Backlight on 16,X models Automatically changing between speakers and headphones when headphones are plugged and unplugged Volume buttons on headphones connected to the 3.5mm jack Graphics switching without rebooting (gmux) Other \u00b6 File Systems: Linux can't mount APFS partitions nor can macOS mount ext4.","title":"Device Support and State of Features"},{"location":"state/#introduction","text":"While Linux is usable on all T2 models, some features are limited due to the lack of drivers or similar. This page should give a general overview of what is working and what is not.","title":"Introduction"},{"location":"state/#working","text":"Internal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard Camera Wifi (For now its working for all the devices we have data about. There are still some devices of whom we don't have data. Refer to the wifi guide for more details)","title":"Working"},{"location":"state/#partially-working","text":"Bluetooth: Not working on models with the BRCM4377 WiFi chip (MacBookPro15,4, MacBookPro16,3, MacBookAir9,1), and models with the BRCM4355 WiFi chip (MacBookAir8,1, MacBookAir8,2). Trackpad: Though it is technically working, it is far from the experience on macOS. No force touch or palm rejection. Some models have deadzones on the edges of their trackpads. Touchbar: There is support for the so called simple mode, the same that you would see on Bootcamp Windows for example. Either function keys from 1 to 12 or basic media / brightness control are shown. Sometimes it is unable to change between function keys and media / brightness keys. Audio: With proper configuration audio can work, however it is not stable in some older kernels and switching between speakers and when using the microphone. Microphone volume is low in some Macs. Suspend is very slow to resume (20-40 seconds), and the Touchbar sometimes does not work after resume. Hybrid Graphics: In case the device has a dedicated AMD GPU (15 and 16 inch models) as well as an Intel iGPU, the iGPU can be used, but this breaks resume, see the Hybrid Graphics page. AMD GPUs: Changing resolution, using DRI_PRIME and doing various other things can cause crashes, but echo high| sudo tee /sys/bus/pci/drivers/amdgpu/0000:??:??.?/power_dpm_force_performance_level or adding the amdgpu.dpm=0 to the kernel commandline stops these crashes.","title":"Partially Working"},{"location":"state/#not-working","text":"Touch ID, storing encryption keys on the T2 The T2's onboard Audio Video Encoder (used for Sidecar on macOS) Keyboard Backlight on 16,X models Automatically changing between speakers and headphones when headphones are plugged and unplugged Volume buttons on headphones connected to the 3.5mm jack Graphics switching without rebooting (gmux)","title":"Not working"},{"location":"state/#other","text":"File Systems: Linux can't mount APFS partitions nor can macOS mount ext4.","title":"Other"},{"location":"distributions/overview/","text":"Introduction \u00b6 This is a landing page for the distribution specific guides contained in this wiki. Arch Linux Fedora Manjaro Ubuntu","title":"Overview"},{"location":"distributions/overview/#introduction","text":"This is a landing page for the distribution specific guides contained in this wiki. Arch Linux Fedora Manjaro Ubuntu","title":"Introduction"},{"location":"distributions/arch/installation/","text":"Installing Arch Linux on a Mac with the T2 Chip \u00b6 Hint If you wish to use archinstall, there is a profile based on this guide which can be found on https://github.com/Redecorating/archinstall-mbp You will need: USB drive with at least 1GB A way to plug it into your Mac (USB-C isn't USB-A) A wired internet connection (i.e. USB-C to Enternet dongle) or wifi. If you need to install via wifi, you may use this iso , which has everything needed to follow the wifi guide and use wifi in the live environment. It's also possible to perform an offline installation, see this (retrieve the packages from an Arch virtual machine or Docker container) You can gather all the necessary information about your hardware or firmware files directly now Making a partition for Linux. Open the Bootcamp installer and follow it until it asks for a Windows ISO, this will clear space for a Linux partition (by removing APFS snapshots). In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Follow the Arch Wiki guide from here up to \"Format the partitions\". The note on the Arch Wiki mentions the EFI system partition, there will be one at /dev/nvme0n1p1 and you can use this if you don't intend to install Windows or already have it installed. If you do intend to triple boot, refer to this guide . Mount the EFI partition that you intend to use for your bootloader on /mnt/boot/efi , and your other partitions on /mnt , etc. Continue following the Arch Wiki's guide until \"Install essential packages\". Run curl -o key.asc https://dl.t2linux.org/archlinux/key.asc to obtain the signing key for t2 linux specific packages. Add the key to pacman using pacman-key --add key.asc and pacman-key --lsign 7F9B8FC29F78B339 to allow the key Update your pacman repositories with pacman -Syy Note If this command errors you are either not using the correct iso (see step 3) or don't have internet (see \"You will need\" at the top of this document) Install the required packages into your new system with: pacstrap /mnt base linux-mbp linux-mbp-headers apple-bce-dkms-git dkms linux-firmware grub efibootmgr (ommit the grub efibootmgr packages from this if you intend to use systemd-boot as your bootloader). Continue following the Arch Wiki's guide until you get to installing a bootloader. In your chroot , install the DKMS modules for Keyboard, Trackpad, Audio and the Touchbar with this guide . Follow the Audio Config Guide too. Add Aunali1's repository to /etc/pacman.conf , by adding this: [mbp] Server = https://dl.t2linux.org/archlinux/$repo/$arch Install a bootloader, probably Grub, but you can also use systemd-boot. Don't do both. Installing Grub: Edit /etc/default/grub , you'll need to install a text editor (i.e. vim or nano ) with pacman -S PACKAGE_NAME for this step. On the line with GRUB_CMDLINE_LINUX=\"quiet splash\" , add the following kernel parameters: intel_iommu=on iommu=pt pcie_ports=compat Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable . grub-mkconfig -o /boot/grub/grub.cfg Installing systemd-boot: bootctl --path=/boot/efi --no-variables install You may need to mask the systemd-boot-system-token service, as it writes to nvram and can cause panics at boot: systemctl mask systemd-boot-system-token . Install a text editor (i.e. pacman -S vim or pacman -S nano ), and make the following edit for both /boot/efi/loader/entries/arch.conf and /boot/efi/loader/entries/arch-fallback.conf . Add intel_iommu=on iommu=pt pcie_ports=compat to the options line to add those kernel parameters. Make nvram/efivars automatically remount as readonly, as writing to them causes a panic (deleting and reading variables, however, does not): echo efivarfs /sys/firmware/efi/efivars efivarfs ro,remount,nofail 0 0 >> /etc/fstab . If this doesn't work, you can instead add the efi=noruntime kernel parameter as described when installing your bootloader (but don't use both of these fixes at the same time). You can follow the wifi guide (if you have already retrieved the correct firmware files, you only need to follow the rest of it) now, or after rebooting into your install. You now will be able to select your Arch install in the macOS Startup Manager by holding option at boot.","title":"Installation"},{"location":"distributions/arch/installation/#installing-arch-linux-on-a-mac-with-the-t2-chip","text":"Hint If you wish to use archinstall, there is a profile based on this guide which can be found on https://github.com/Redecorating/archinstall-mbp You will need: USB drive with at least 1GB A way to plug it into your Mac (USB-C isn't USB-A) A wired internet connection (i.e. USB-C to Enternet dongle) or wifi. If you need to install via wifi, you may use this iso , which has everything needed to follow the wifi guide and use wifi in the live environment. It's also possible to perform an offline installation, see this (retrieve the packages from an Arch virtual machine or Docker container) You can gather all the necessary information about your hardware or firmware files directly now Making a partition for Linux. Open the Bootcamp installer and follow it until it asks for a Windows ISO, this will clear space for a Linux partition (by removing APFS snapshots). In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Follow the Arch Wiki guide from here up to \"Format the partitions\". The note on the Arch Wiki mentions the EFI system partition, there will be one at /dev/nvme0n1p1 and you can use this if you don't intend to install Windows or already have it installed. If you do intend to triple boot, refer to this guide . Mount the EFI partition that you intend to use for your bootloader on /mnt/boot/efi , and your other partitions on /mnt , etc. Continue following the Arch Wiki's guide until \"Install essential packages\". Run curl -o key.asc https://dl.t2linux.org/archlinux/key.asc to obtain the signing key for t2 linux specific packages. Add the key to pacman using pacman-key --add key.asc and pacman-key --lsign 7F9B8FC29F78B339 to allow the key Update your pacman repositories with pacman -Syy Note If this command errors you are either not using the correct iso (see step 3) or don't have internet (see \"You will need\" at the top of this document) Install the required packages into your new system with: pacstrap /mnt base linux-mbp linux-mbp-headers apple-bce-dkms-git dkms linux-firmware grub efibootmgr (ommit the grub efibootmgr packages from this if you intend to use systemd-boot as your bootloader). Continue following the Arch Wiki's guide until you get to installing a bootloader. In your chroot , install the DKMS modules for Keyboard, Trackpad, Audio and the Touchbar with this guide . Follow the Audio Config Guide too. Add Aunali1's repository to /etc/pacman.conf , by adding this: [mbp] Server = https://dl.t2linux.org/archlinux/$repo/$arch Install a bootloader, probably Grub, but you can also use systemd-boot. Don't do both. Installing Grub: Edit /etc/default/grub , you'll need to install a text editor (i.e. vim or nano ) with pacman -S PACKAGE_NAME for this step. On the line with GRUB_CMDLINE_LINUX=\"quiet splash\" , add the following kernel parameters: intel_iommu=on iommu=pt pcie_ports=compat Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable . grub-mkconfig -o /boot/grub/grub.cfg Installing systemd-boot: bootctl --path=/boot/efi --no-variables install You may need to mask the systemd-boot-system-token service, as it writes to nvram and can cause panics at boot: systemctl mask systemd-boot-system-token . Install a text editor (i.e. pacman -S vim or pacman -S nano ), and make the following edit for both /boot/efi/loader/entries/arch.conf and /boot/efi/loader/entries/arch-fallback.conf . Add intel_iommu=on iommu=pt pcie_ports=compat to the options line to add those kernel parameters. Make nvram/efivars automatically remount as readonly, as writing to them causes a panic (deleting and reading variables, however, does not): echo efivarfs /sys/firmware/efi/efivars efivarfs ro,remount,nofail 0 0 >> /etc/fstab . If this doesn't work, you can instead add the efi=noruntime kernel parameter as described when installing your bootloader (but don't use both of these fixes at the same time). You can follow the wifi guide (if you have already retrieved the correct firmware files, you only need to follow the rest of it) now, or after rebooting into your install. You now will be able to select your Arch install in the macOS Startup Manager by holding option at boot.","title":"Installing Arch Linux on a Mac with the T2 Chip"},{"location":"distributions/fedora/faq/","text":"Installing alongside Windows \u00b6 If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Fedora. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again. Why isn't sound / WiFi working? \u00b6 Due to issues in the Fedora install process, there is no sound or WiFi working after install. You'll have to set them up manually. Refer to these guides on audio configuration (note to follow the PipeWire instructions as Fedora uses PipeWire now) and WiFi configuration . My boot hangs before getting to the installer \u00b6 This may be due to differences between USB-C to USB-A adapters. Try a different one if it is not working.","title":"FAQ"},{"location":"distributions/fedora/faq/#installing-alongside-windows","text":"If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Fedora. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again.","title":"Installing alongside Windows"},{"location":"distributions/fedora/faq/#why-isnt-sound-wifi-working","text":"Due to issues in the Fedora install process, there is no sound or WiFi working after install. You'll have to set them up manually. Refer to these guides on audio configuration (note to follow the PipeWire instructions as Fedora uses PipeWire now) and WiFi configuration .","title":"Why isn't sound / WiFi working?"},{"location":"distributions/fedora/faq/#my-boot-hangs-before-getting-to-the-installer","text":"This may be due to differences between USB-C to USB-A adapters. Try a different one if it is not working.","title":"My boot hangs before getting to the installer"},{"location":"distributions/fedora/home/","text":"Welcome to the T2 Fedora wiki! Click here to get started.","title":"Home"},{"location":"distributions/fedora/installation/","text":"Download the latest safe release \u00b6 Many thanks to Mike for building. You can download a live iso here Hardware Requirements \u00b6 USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter. Important: different USB-C to USB adapters work differently - if you're stuck before getting to the graphical UI during boot this may be the problem. Install Procedure \u00b6 (These instructions are re-used from the Manjaro installation guide) In order to install Fedora, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when you're done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Fedora Live CD\". Once booted into Fedora, you can install it like normal until you get to the partition option. If you don't get to the graphic OS, try another USB stick. They are not all created alike. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Fedora for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone unless using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to the FAQs for Ubuntu and Manjaro . If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Fedora! :) Once you're booted and in your desktop, set up Wifi and audio (note: Fedora uses PipeWire!) to finalize.","title":"Installation"},{"location":"distributions/fedora/installation/#download-the-latest-safe-release","text":"Many thanks to Mike for building. You can download a live iso here","title":"Download the latest safe release"},{"location":"distributions/fedora/installation/#hardware-requirements","text":"USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter. Important: different USB-C to USB adapters work differently - if you're stuck before getting to the graphical UI during boot this may be the problem.","title":"Hardware Requirements"},{"location":"distributions/fedora/installation/#install-procedure","text":"(These instructions are re-used from the Manjaro installation guide) In order to install Fedora, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when you're done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Fedora Live CD\". Once booted into Fedora, you can install it like normal until you get to the partition option. If you don't get to the graphic OS, try another USB stick. They are not all created alike. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Fedora for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone unless using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to the FAQs for Ubuntu and Manjaro . If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Fedora! :) Once you're booted and in your desktop, set up Wifi and audio (note: Fedora uses PipeWire!) to finalize.","title":"Install Procedure"},{"location":"distributions/manjaro/building/","text":"Option 1: Docker - All Linux Distros \u00b6 First, you need to ensure that docker isn't using overlay or overlay2 filesystems. This can be verified by running docker info . And will be shown next to Storage Driver . In the event that you are running overlay , Look at this docker documentation on how to switch to VFS. Note, this doesn't work on OSX or Windows, I am working closely with the Manjaro Devs on this one. Quick Docker Install Script - For Linux sh -c \" $( curl -fsSL \"https://raw.githubusercontent.com/JPyke3/mbp-manjaro/master/build-in-docker.sh\" ) \" Docker Command docker run --privileged \\ -v ~/manjaro-mbp-iso:/root/out \\ -v { PATH-TO-REPO } :/root/iso-profiles \\ --env KERNEL = linux57-mbp \\ --env EDITION = gnome \\ jpyke3/mbp-manjaro-buildiso Command Breakdown \u00b6 --privileged This is required for allowing the filesystems to be created. (This is a security risk! Read for yourself the documentation on this flag) -v Create a folder on your host filesystem to retrieve the compiled files from the container Ensure that {PATH-TO-REPO} is replaced by the absolute path to this repo's files. --env There are two environment variables: KERNEL : This is used for defining which kernel version to use. All packages will follow the -mbp naming scheme. EDITION : This is used for defining which edition of manjaro you would like to install. Option 2: Manually on an existing Manjaro Install \u00b6 First Install Manjaro Tools: pamac install manjaro-tools-iso git Clone the repository to your home directory git clone https://github.com/JPyke3/mbp-manjaro ~/iso-profiles run a command corrisponding to your preferred version of Manjaro: buildiso -f -p { edition } -k linux57-mbp Available Options are: architect gnome kde nxd xfce awesome bspwm-mate cinnamon i3 lxqt openbox webdad bspwm budgie deepin lxde mate ukui File Locations \u00b6 Navigate to the directory for your iso file. If Using a official edition go to: cd /var/cache/manjaro-tools/iso/manjaro/ { NAME_OF_EDITION } /20.0.3/ If using a community edition to: cd /var/cache/manjaro-tools/iso/community/ { NAME_OF_EDITION } /20.0.3/","title":"Building"},{"location":"distributions/manjaro/building/#option-1-docker-all-linux-distros","text":"First, you need to ensure that docker isn't using overlay or overlay2 filesystems. This can be verified by running docker info . And will be shown next to Storage Driver . In the event that you are running overlay , Look at this docker documentation on how to switch to VFS. Note, this doesn't work on OSX or Windows, I am working closely with the Manjaro Devs on this one. Quick Docker Install Script - For Linux sh -c \" $( curl -fsSL \"https://raw.githubusercontent.com/JPyke3/mbp-manjaro/master/build-in-docker.sh\" ) \" Docker Command docker run --privileged \\ -v ~/manjaro-mbp-iso:/root/out \\ -v { PATH-TO-REPO } :/root/iso-profiles \\ --env KERNEL = linux57-mbp \\ --env EDITION = gnome \\ jpyke3/mbp-manjaro-buildiso","title":"Option 1: Docker - All Linux Distros"},{"location":"distributions/manjaro/building/#command-breakdown","text":"--privileged This is required for allowing the filesystems to be created. (This is a security risk! Read for yourself the documentation on this flag) -v Create a folder on your host filesystem to retrieve the compiled files from the container Ensure that {PATH-TO-REPO} is replaced by the absolute path to this repo's files. --env There are two environment variables: KERNEL : This is used for defining which kernel version to use. All packages will follow the -mbp naming scheme. EDITION : This is used for defining which edition of manjaro you would like to install.","title":"Command Breakdown"},{"location":"distributions/manjaro/building/#option-2-manually-on-an-existing-manjaro-install","text":"First Install Manjaro Tools: pamac install manjaro-tools-iso git Clone the repository to your home directory git clone https://github.com/JPyke3/mbp-manjaro ~/iso-profiles run a command corrisponding to your preferred version of Manjaro: buildiso -f -p { edition } -k linux57-mbp Available Options are: architect gnome kde nxd xfce awesome bspwm-mate cinnamon i3 lxqt openbox webdad bspwm budgie deepin lxde mate ukui","title":"Option 2: Manually on an existing Manjaro Install"},{"location":"distributions/manjaro/building/#file-locations","text":"Navigate to the directory for your iso file. If Using a official edition go to: cd /var/cache/manjaro-tools/iso/manjaro/ { NAME_OF_EDITION } /20.0.3/ If using a community edition to: cd /var/cache/manjaro-tools/iso/community/ { NAME_OF_EDITION } /20.0.3/","title":"File Locations"},{"location":"distributions/manjaro/faq/","text":"Installing alongside Windows \u00b6 If you want both Manjaro and Windows installed on your system, refer to this guide on triple booting as you install. Issues Updating Because of the MBP Repository \u00b6 When you update the system, you may recieve errors about my key being corrupted, if that occurs open a terminal and run this sudo pacman-key --recv-key 2BA2DFA128BBD111034F7626C7833DB15753380A --keyserver keyserver.ubuntu.com Switch Touchbar to Function Keys \u00b6 Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"FAQ"},{"location":"distributions/manjaro/faq/#installing-alongside-windows","text":"If you want both Manjaro and Windows installed on your system, refer to this guide on triple booting as you install.","title":"Installing alongside Windows"},{"location":"distributions/manjaro/faq/#issues-updating-because-of-the-mbp-repository","text":"When you update the system, you may recieve errors about my key being corrupted, if that occurs open a terminal and run this sudo pacman-key --recv-key 2BA2DFA128BBD111034F7626C7833DB15753380A --keyserver keyserver.ubuntu.com","title":"Issues Updating Because of the MBP Repository"},{"location":"distributions/manjaro/faq/#switch-touchbar-to-function-keys","text":"Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"Switch Touchbar to Function Keys"},{"location":"distributions/manjaro/home/","text":"Welcome to the mbp-manjaro wiki! Click here to get started.","title":"Home"},{"location":"distributions/manjaro/installation/","text":"Download a latest release \u00b6 See releases Hardware Requirements \u00b6 USB-C to Ethernet cable adapter. While you can install Manjaro over WiFi, it would be a lot easier to use an Adapter during the installation process. USB-C to USB Adapter USB drive Install Procedure \u00b6 Partition your drive in macOS so you can install Linux. You can either use Disk Utility or use Bootcamp, but the important thing is that you have two partitions (your macOS partition and your new linux one). It isn't recommended that you completely delete macOS as firmware updates are applied through it. Flash your Manjaro ISO to a USB Stick. If you want an easier way to do this. Use Balena Etcher . Terminal users can also use dd. Disable macOS secure boot. Apple's Documentation Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System option using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. After booting into Manjaro, open a terminal window and run the following commands. If asked to enter a password, use manjaro as the password. systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -Sy calamares-mbp In case you get the error 'Calamares initialisation failed', turn off your Mac and follow steps 5 and 6 again. Then open a terminal window and run these commands instead: systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -Sy cmake extra-cmake-modules pkgconfig sudo pacman -Sy lib32-glibc gcc wget https://github.com/KDE/kpmcore/archive/v4.2.0.tar.gz tar -xvf v4.2.0.tar.gz cd kpmcore-4.2.0 mkdir build cd build cmake .. sudo make install sudo pacman -Sy calamares-mbp sudo calamares Open the installer and proceed normally until you arrive at the partitioning stage (the Installer will automatically start if you have used the second set of commands given above). Click Manual Partitioning. Click on /dev/nvme0n1p1 , then press edit at the bottom of the install window, change the mount point to /boot/efi , and then click ok. Usually, the macOS partition is mounted to /dev/nvme0n1p2 (the Apple APFS Partition). Ignore this partition. Delete the partition you created before - this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem. If you know what you're doing, feel free to skip to step 15. Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click ok. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click ok. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer. Make sure you remove the install medium once powered off. Once again, power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot. Welcome to Manjaro :)","title":"Installation"},{"location":"distributions/manjaro/installation/#download-a-latest-release","text":"See releases","title":"Download a latest release"},{"location":"distributions/manjaro/installation/#hardware-requirements","text":"USB-C to Ethernet cable adapter. While you can install Manjaro over WiFi, it would be a lot easier to use an Adapter during the installation process. USB-C to USB Adapter USB drive","title":"Hardware Requirements"},{"location":"distributions/manjaro/installation/#install-procedure","text":"Partition your drive in macOS so you can install Linux. You can either use Disk Utility or use Bootcamp, but the important thing is that you have two partitions (your macOS partition and your new linux one). It isn't recommended that you completely delete macOS as firmware updates are applied through it. Flash your Manjaro ISO to a USB Stick. If you want an easier way to do this. Use Balena Etcher . Terminal users can also use dd. Disable macOS secure boot. Apple's Documentation Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System option using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. After booting into Manjaro, open a terminal window and run the following commands. If asked to enter a password, use manjaro as the password. systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -Sy calamares-mbp In case you get the error 'Calamares initialisation failed', turn off your Mac and follow steps 5 and 6 again. Then open a terminal window and run these commands instead: systemctl start systemd-timesyncd.service sudo sed -i 's/https:\\/\\/jacobpyke.xyz/https:\\/\\/mbp-repo.jacobpyke.xyz/' /etc/pacman.conf sudo pacman -R calamares sudo pacman -Sy cmake extra-cmake-modules pkgconfig sudo pacman -Sy lib32-glibc gcc wget https://github.com/KDE/kpmcore/archive/v4.2.0.tar.gz tar -xvf v4.2.0.tar.gz cd kpmcore-4.2.0 mkdir build cd build cmake .. sudo make install sudo pacman -Sy calamares-mbp sudo calamares Open the installer and proceed normally until you arrive at the partitioning stage (the Installer will automatically start if you have used the second set of commands given above). Click Manual Partitioning. Click on /dev/nvme0n1p1 , then press edit at the bottom of the install window, change the mount point to /boot/efi , and then click ok. Usually, the macOS partition is mounted to /dev/nvme0n1p2 (the Apple APFS Partition). Ignore this partition. Delete the partition you created before - this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem. If you know what you're doing, feel free to skip to step 15. Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click ok. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click ok. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer. Make sure you remove the install medium once powered off. Once again, power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot. Welcome to Manjaro :)","title":"Install Procedure"},{"location":"distributions/ubuntu/faq/","text":"Why does my MacBook turn off in the middle of the Ubuntu installation? \u00b6 This seems to happen with certain MacBooks because the GRUB bootloader installer tries accessing the efivars/nvram, which Apple doesn't allow and the installer doesn't know what to do. There is a way to stop this. Boot into the installation media with an External USB Keyboard plugged in. Press e when you selected the \"Try Ubuntu without installing\" option. Scroll to the bottom with the arrow keys, and type in efi=noruntime . With the External keyboard, then press CTRL+X or F10 to boot into the Live Media. The installation should work fine now. This issue has occured for anyone on the 16,1 and maybe the 16,4. (Credits to Redecorating for this fix) Making the GRUB Menu appear \u00b6 The GRUB bootloader by default turns off the GRUB Menu. This means you can't boot into Bootcamp Windows if it's installed. This can be easily fixed after Ubuntu is fully installed. In a Terminal in Ubuntu, edit file /etc/default/grub with any preferred editior (nano/vim) and with root permissions. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . Save the file once you're done. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. (Also credits to Redecorating for telling me about this fix, marcosfad for documenting the fix here ) Installing alongside Windows \u00b6 If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Ubuntu. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again. Why isn't sound working? \u00b6 Due to issues in the mbp-ubuntu install process, there is no sound working after install. You'll have to set it up manually. Refer to this guide on audio configuration .","title":"FAQ"},{"location":"distributions/ubuntu/faq/#why-does-my-macbook-turn-off-in-the-middle-of-the-ubuntu-installation","text":"This seems to happen with certain MacBooks because the GRUB bootloader installer tries accessing the efivars/nvram, which Apple doesn't allow and the installer doesn't know what to do. There is a way to stop this. Boot into the installation media with an External USB Keyboard plugged in. Press e when you selected the \"Try Ubuntu without installing\" option. Scroll to the bottom with the arrow keys, and type in efi=noruntime . With the External keyboard, then press CTRL+X or F10 to boot into the Live Media. The installation should work fine now. This issue has occured for anyone on the 16,1 and maybe the 16,4. (Credits to Redecorating for this fix)","title":"Why does my MacBook turn off in the middle of the Ubuntu installation?"},{"location":"distributions/ubuntu/faq/#making-the-grub-menu-appear","text":"The GRUB bootloader by default turns off the GRUB Menu. This means you can't boot into Bootcamp Windows if it's installed. This can be easily fixed after Ubuntu is fully installed. In a Terminal in Ubuntu, edit file /etc/default/grub with any preferred editior (nano/vim) and with root permissions. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . Save the file once you're done. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. (Also credits to Redecorating for telling me about this fix, marcosfad for documenting the fix here )","title":"Making the GRUB Menu appear"},{"location":"distributions/ubuntu/faq/#installing-alongside-windows","text":"If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Ubuntu. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again.","title":"Installing alongside Windows"},{"location":"distributions/ubuntu/faq/#why-isnt-sound-working","text":"Due to issues in the mbp-ubuntu install process, there is no sound working after install. You'll have to set it up manually. Refer to this guide on audio configuration .","title":"Why isn't sound working?"},{"location":"distributions/ubuntu/home/","text":"Welcome to the mbp-ubuntu wiki! Click here to get started.","title":"Home"},{"location":"distributions/ubuntu/installation/","text":"Download the latest safe release \u00b6 Warning: Mac Mini users will need to install rEFInd to boot GRUB as the Mac Startup Manager on Mac Mini is not booting Ubuntu's GRUB directly. Download here The iso you should download depends on your machine, but usually the normal mbp iso works fine. Hardware Requirements \u00b6 USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter Install Procedure \u00b6 (These instructions are reused from the Manjaro installation guide) In order to install Ubuntu, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when your done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Ubuntu without installing\". Just a warning, if you select \"Install Ubuntu\", there might be a loud startup sound. Once booted into Ubuntu, you can install it like normal until you get to the partition option. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Ubuntu for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone until using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to FAQ. If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Ubuntu! :)","title":"Installation"},{"location":"distributions/ubuntu/installation/#download-the-latest-safe-release","text":"Warning: Mac Mini users will need to install rEFInd to boot GRUB as the Mac Startup Manager on Mac Mini is not booting Ubuntu's GRUB directly. Download here The iso you should download depends on your machine, but usually the normal mbp iso works fine.","title":"Download the latest safe release"},{"location":"distributions/ubuntu/installation/#hardware-requirements","text":"USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter","title":"Hardware Requirements"},{"location":"distributions/ubuntu/installation/#install-procedure","text":"(These instructions are reused from the Manjaro installation guide) In order to install Ubuntu, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when your done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Ubuntu without installing\". Just a warning, if you select \"Install Ubuntu\", there might be a loud startup sound. Once booted into Ubuntu, you can install it like normal until you get to the partition option. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Ubuntu for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone until using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to FAQ. If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Ubuntu! :)","title":"Install Procedure"},{"location":"guides/audio-config/","text":"Introduction \u00b6 This page explains how to get the config files for using the T2 audio device, which allows use of the 3.5mm headphone port, the built in speakers, the built in mic and the headphones' mic. Audio Configuration Files \u00b6 These files can be found here , and there are instructions on where to put them in that gist. If you are using a 2019 16 inch MBP, use this set of files, as that laptop has 6 speakers and needs slightly different config. If you are using a 2020 13 inch MacBook Air, use this set of files. Using Pipewire instead of Pulseaudio \u00b6 You'll need to modify the /lib/udev/rules.d/91-pulseaudio-custom.rules file from the links above. SUBSYSTEM!=\"sound\", GOTO=\"pulseaudio_end\" ACTION!=\"change\", GOTO=\"pulseaudio_end\" KERNEL!=\"card*\", GOTO=\"pulseaudio_end\" -SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\" +SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\", ENV{ACP_PROFILE_SET}=\"apple-t2.conf\" LABEL=\"pulseaudio_end\" Note: The updated locations for the files in the links above for Pipewire distributions will be: /usr/share/alsa/cards/AppleT2.conf /usr/share/alsa-card-profile/mixer/profile-sets/apple-t2.conf /usr/lib/udev/rules.d/91-pulseaudio-custom.rules Issues \u00b6 Some people are unable to get audio input to work. You may have to use a seperate microphone. All of apple's fancy tuning of the speakers is done in macOS, we don't have anything like that at the moment.","title":"Audio"},{"location":"guides/audio-config/#introduction","text":"This page explains how to get the config files for using the T2 audio device, which allows use of the 3.5mm headphone port, the built in speakers, the built in mic and the headphones' mic.","title":"Introduction"},{"location":"guides/audio-config/#audio-configuration-files","text":"These files can be found here , and there are instructions on where to put them in that gist. If you are using a 2019 16 inch MBP, use this set of files, as that laptop has 6 speakers and needs slightly different config. If you are using a 2020 13 inch MacBook Air, use this set of files.","title":"Audio Configuration Files"},{"location":"guides/audio-config/#using-pipewire-instead-of-pulseaudio","text":"You'll need to modify the /lib/udev/rules.d/91-pulseaudio-custom.rules file from the links above. SUBSYSTEM!=\"sound\", GOTO=\"pulseaudio_end\" ACTION!=\"change\", GOTO=\"pulseaudio_end\" KERNEL!=\"card*\", GOTO=\"pulseaudio_end\" -SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\" +SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\", ENV{ACP_PROFILE_SET}=\"apple-t2.conf\" LABEL=\"pulseaudio_end\" Note: The updated locations for the files in the links above for Pipewire distributions will be: /usr/share/alsa/cards/AppleT2.conf /usr/share/alsa-card-profile/mixer/profile-sets/apple-t2.conf /usr/lib/udev/rules.d/91-pulseaudio-custom.rules","title":"Using Pipewire instead of Pulseaudio"},{"location":"guides/audio-config/#issues","text":"Some people are unable to get audio input to work. You may have to use a seperate microphone. All of apple's fancy tuning of the speakers is done in macOS, we don't have anything like that at the moment.","title":"Issues"},{"location":"guides/dkms/","text":"Introduction \u00b6 This page explains how to install the kernel modules for the Keyboard, Audio, Touchbar and the Ambient Light sensor with DKMS. You will need a patched kernel. Do you need to do this? \u00b6 Is your keyboard working? If no, then you'll need the BCE module. If you have a Touchbar, is it working? If no, then you'll need the apple-ibridge module. To get started with this guide, first install the dkms package. You may have been using an outdated kernel or your distribution may have been using kernel modules that do not match the ones listed below (check using dkms status or ls -l /usr/src ). If the version of apple-bce in the output is 0.1 , you have to uninstall the old modules first to avoid any compatibility issues by running: sudo dkms uninstall -m apple-bce -v 0 .1 sudo dkms uninstall -m apple-ibridge -v 0 .1 sudo rm -r /usr/src/apple-bce-0.1 sudo rm -r /usr/src/apple-ibridge-0.1 sudo rm -r /var/lib/dkms/apple-bce sudo rm -r /var/lib/dkms/apple-ibridge Installing modules \u00b6 Installing the BCE (Buffer Copy Engine) module for Keyboard and Audio If you are on arch, you can use Aunali1's apple-bce-dkms-git package Otherwise, run sudo git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce-r183.c884d9c Create a dkms.conf file in /usr/src/apple-bce-r183.c884d9c and put in the following: PACKAGE_NAME=\"apple-bce\" PACKAGE_VERSION=\"r183.c884d9c\" MAKE[0]=\"make KVERSION=$kernelver\" CLEAN=\"make clean\" BUILT_MODULE_NAME[0]=\"apple-bce\" DEST_MODULE_LOCATION[0]=\"/kernel/drivers/misc\" AUTOINSTALL=\"yes\" Now run sudo dkms install -m apple-bce -v r183.c884d9c . If on a live ISO, use sudo dkms install -m apple-bce -v r183.c884d9c -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Installing the Touchbar and Ambient Light sensor modules Run sudo git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge-0.1 Now run sudo dkms install -m apple-ibridge -v 0.1 . If on a live ISO, use sudo dkms install -m apple-ibridge -v 0.1 -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Load the modules into the kernel Note This is only necessary if you wish to use the modules right away. If you are installing modules from a live iso the commands will fail as the modules have only been installed for the kernel you specified. sudo modprobe apple_bce sudo modprobe apple_ib_tb sudo modprobe apple_ib_als The Touchbar and keyboard should work, for audio, you'll need some config files, refer to the Audio Config guide . Make modules load on boot \u00b6 Ubuntu Ubuntu users may skip this step as it's already set up in their distro. If the modules are still not loading on boot, then you may follow this section. echo apple-bce >> /etc/modules-load.d/t2.conf Module configuration \u00b6 The Touchbar module offers some modes to set. In /etc/modprobe.d/apple-tb.conf , set fnmode ( options apple-ib-tb fnmode=x ) to one of the following options: 0: Only show F1-F12 1: Show media and brightness controls, use the fn key to switch to F1-12 2: Show F1-F12, use the fn key to switch to media and brightness controls 3: Only show media and brightness controls 4: Only show the escape key Ubuntu Ubuntu has /etc/modprobe.d/apple-touchbar.conf added by default instead of /etc/modprobe.d/apple-tb.conf . Thus, its advised to rename apple-touchbar.conf to apple-tb.conf before editing. Fixing Suspend \u00b6 Copy this script to /lib/systemd/system-sleep/rmmod_tb.sh Now run :- sudo chmod 755 /lib/systemd/system-sleep/rmmod_tb.sh sudo chown root:root /lib/systemd/system-sleep/rmmod_tb.sh It unloads the Touchbar modules as they can cause issues for suspend. Kernel panic when loading apple-ib-als \u00b6 This was fixed in this commit , please follow the dkms guide to update. Use ambient light sensor to automatically change brightness (if not working already) \u00b6 You can use this script . Make sure you have the apple-ib-als module loaded.","title":"DKMS"},{"location":"guides/dkms/#introduction","text":"This page explains how to install the kernel modules for the Keyboard, Audio, Touchbar and the Ambient Light sensor with DKMS. You will need a patched kernel.","title":"Introduction"},{"location":"guides/dkms/#do-you-need-to-do-this","text":"Is your keyboard working? If no, then you'll need the BCE module. If you have a Touchbar, is it working? If no, then you'll need the apple-ibridge module. To get started with this guide, first install the dkms package. You may have been using an outdated kernel or your distribution may have been using kernel modules that do not match the ones listed below (check using dkms status or ls -l /usr/src ). If the version of apple-bce in the output is 0.1 , you have to uninstall the old modules first to avoid any compatibility issues by running: sudo dkms uninstall -m apple-bce -v 0 .1 sudo dkms uninstall -m apple-ibridge -v 0 .1 sudo rm -r /usr/src/apple-bce-0.1 sudo rm -r /usr/src/apple-ibridge-0.1 sudo rm -r /var/lib/dkms/apple-bce sudo rm -r /var/lib/dkms/apple-ibridge","title":"Do you need to do this?"},{"location":"guides/dkms/#installing-modules","text":"Installing the BCE (Buffer Copy Engine) module for Keyboard and Audio If you are on arch, you can use Aunali1's apple-bce-dkms-git package Otherwise, run sudo git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce-r183.c884d9c Create a dkms.conf file in /usr/src/apple-bce-r183.c884d9c and put in the following: PACKAGE_NAME=\"apple-bce\" PACKAGE_VERSION=\"r183.c884d9c\" MAKE[0]=\"make KVERSION=$kernelver\" CLEAN=\"make clean\" BUILT_MODULE_NAME[0]=\"apple-bce\" DEST_MODULE_LOCATION[0]=\"/kernel/drivers/misc\" AUTOINSTALL=\"yes\" Now run sudo dkms install -m apple-bce -v r183.c884d9c . If on a live ISO, use sudo dkms install -m apple-bce -v r183.c884d9c -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Installing the Touchbar and Ambient Light sensor modules Run sudo git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge-0.1 Now run sudo dkms install -m apple-ibridge -v 0.1 . If on a live ISO, use sudo dkms install -m apple-ibridge -v 0.1 -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Load the modules into the kernel Note This is only necessary if you wish to use the modules right away. If you are installing modules from a live iso the commands will fail as the modules have only been installed for the kernel you specified. sudo modprobe apple_bce sudo modprobe apple_ib_tb sudo modprobe apple_ib_als The Touchbar and keyboard should work, for audio, you'll need some config files, refer to the Audio Config guide .","title":"Installing modules"},{"location":"guides/dkms/#make-modules-load-on-boot","text":"Ubuntu Ubuntu users may skip this step as it's already set up in their distro. If the modules are still not loading on boot, then you may follow this section. echo apple-bce >> /etc/modules-load.d/t2.conf","title":"Make modules load on boot"},{"location":"guides/dkms/#module-configuration","text":"The Touchbar module offers some modes to set. In /etc/modprobe.d/apple-tb.conf , set fnmode ( options apple-ib-tb fnmode=x ) to one of the following options: 0: Only show F1-F12 1: Show media and brightness controls, use the fn key to switch to F1-12 2: Show F1-F12, use the fn key to switch to media and brightness controls 3: Only show media and brightness controls 4: Only show the escape key Ubuntu Ubuntu has /etc/modprobe.d/apple-touchbar.conf added by default instead of /etc/modprobe.d/apple-tb.conf . Thus, its advised to rename apple-touchbar.conf to apple-tb.conf before editing.","title":"Module configuration"},{"location":"guides/dkms/#fixing-suspend","text":"Copy this script to /lib/systemd/system-sleep/rmmod_tb.sh Now run :- sudo chmod 755 /lib/systemd/system-sleep/rmmod_tb.sh sudo chown root:root /lib/systemd/system-sleep/rmmod_tb.sh It unloads the Touchbar modules as they can cause issues for suspend.","title":"Fixing Suspend"},{"location":"guides/dkms/#kernel-panic-when-loading-apple-ib-als","text":"This was fixed in this commit , please follow the dkms guide to update.","title":"Kernel panic when loading apple-ib-als"},{"location":"guides/dkms/#use-ambient-light-sensor-to-automatically-change-brightness-if-not-working-already","text":"You can use this script . Make sure you have the apple-ib-als module loaded.","title":"Use ambient light sensor to automatically change brightness (if not working already)"},{"location":"guides/fan/","text":"Introduction \u00b6 This page is a step by step guide to get fan control working on t2 Macs. In some Macs, the fan has been found to work out of the box. In such a case the driver is not required until you want to force a certain speed or do some other configuration which can be done by the help of this driver. Steps \u00b6 Clone the repository into a directory of your choice git clone https://github.com/networkException/mbpfan Compile the daemon using make Note This will run a patch script that finds a fan device on your system. You can use its output for debug purposes Run the tests to confirm that everything is working sudo make tests If the tests ran successfully, install using sudo make install Now enable starting at boot sudo cp mbpfan.service /etc/systemd/system/ sudo systemctl enable mbpfan.service sudo systemctl daemon-reload sudo systemctl start mbpfan.service Configuration \u00b6 The daemons config file can be found at /etc/mbpfan.conf . Uncommenting and setting min_fan1_speed for example will let you force a certain speed.","title":"Fan"},{"location":"guides/fan/#introduction","text":"This page is a step by step guide to get fan control working on t2 Macs. In some Macs, the fan has been found to work out of the box. In such a case the driver is not required until you want to force a certain speed or do some other configuration which can be done by the help of this driver.","title":"Introduction"},{"location":"guides/fan/#steps","text":"Clone the repository into a directory of your choice git clone https://github.com/networkException/mbpfan Compile the daemon using make Note This will run a patch script that finds a fan device on your system. You can use its output for debug purposes Run the tests to confirm that everything is working sudo make tests If the tests ran successfully, install using sudo make install Now enable starting at boot sudo cp mbpfan.service /etc/systemd/system/ sudo systemctl enable mbpfan.service sudo systemctl daemon-reload sudo systemctl start mbpfan.service","title":"Steps"},{"location":"guides/fan/#configuration","text":"The daemons config file can be found at /etc/mbpfan.conf . Uncommenting and setting min_fan1_speed for example will let you force a certain speed.","title":"Configuration"},{"location":"guides/hybrid-graphics/","text":"Introduction \u00b6 This page describes how to use the iGPU on MacBook Pros with Hybrid Graphics (2 GPUs). 13 inch MacBooks only have an iGPU, and do not need this. Using the iGPU means you can save power by turning off the more powerful AMD dGPU when you don't need it. This has been tested on the MacBookPro16,1 and the MacBookPro15,1. The 15,3 and 16,4 models are very similar and should work too. Issues \u00b6 Resume after suspend is broken, as the GMUX (graphics multiplexer chip) doesn't connect the iGPU to the display after resuming. For this to be fixed, the method that macOS uses to make the t2 chip control GMUX needs to be determined (likely through SMC keys or ACPI). The extra battery life may make this a worthwhile tradeoff (about 3 hours to almost 6 hours on a 16,1) If using DRI_PRIME=1 on programs causes system crashes, with \" CPU CATERR \" probem reports in macOS, disable dynamic power management with the amdgpu.dpm=0 kernel argument. Enabling the iGPU \u00b6 Note Aside from step 1, these instructions should be followed in Linux. Update macOS. BigSur can boot when the iGPU is set as the boot GPU, but this has not been tested on Catalina, and on older MacBooks , setting the iGPU as the boot GPU has stopped macOS from booting properly with graphics, and it is unknown when this was fixed (you might want to turn ssh on in macOS if you are worried about this). Compile apple-set-os loader, which spoofs macOS so that the iGPU gets enabled: git clone https://github.com/aa15032261/apple_set_os-loader cd apple_set_os-loader make #you will need efi.h to compile this, which is installed in the gnu-efi package in most distros sudo mv /boot/efi/efi/boot/bootx64.efi /boot/efi/efi/boot/bootx64_original.efi sudo cp ./bootx64.efi /boot/efi/efi/boot/bootx64.efi Reboot to Linux, you should see this at boot (the GPUs listed might be different): ================== apple_set_os loader v0.5 ================== SetOsProtocol Handle Count: 1 AppleSetOs will be loaded, press Z to disable. ----------------------- Ready to boot ------------------------ Plug in your eGPU then press any key. Booting bootx64_original.efi in 6 second(s) Connected Graphics Cards: 1002 7340 AMD - Navi 14 [Radeon RX 5500/5500M] 8086 3E9B INTEL - UHD Graphics 630 (Mobile) Press any key other than z or wait, and it should boot you into Linux. If you want a silent version of this that doesn't wait for input, you can use this fork . Your brightness control should stop working, for now . lspci should have an Intel Graphics card at address 00:02.0 . Setup this tool to allow changing the boot gpu from grub: git clone https://github.com/Redecorating/efi-gpu-power-prefs cd efi-gpu-power-prefs make #you will need efi.h to compile this, which is installed in the gnu-efi package in most distros make install sudo grub-mkconfig -o /boot/grub/grub.cfg Reboot and in the grub menu, select \"Enable iGPU\". Your computer will shutdown. Power it back on and boot linux. If you boot macOS, this will be reset and you'll have to redo this step. You display should be now connected to your Intel iGPU when booting Linux and display brightness should work again (probably with /sys/class/backlight/acpi_video0 ). Try DRI_PRIME=1 glxinfo | grep \"OpenGL renderer\"&&glxinfo | grep \"OpenGL renderer\" , you should get both AMD and Intel. Running things with DRI_PRIME=1 will make them render on your AMDGPU (some things do this automatically). You will get more battery time now, as your AMD gpu can be turned off when not needed. Use on / with Windows \u00b6 In one case (has anyone else tried this?), the iGPU only works on Windows if there's no driver for it installed. Windows likes installing drivers. There might be special iGPU drivers in the Bootcamp support software for single GPU MacBooks, which might help resolve this. If you want to use the iGPU on Linux but not on Windows, you can reset the nvram variable in Linux by deleting it as described below (Writing to nvram panics the t2, but reading and deleting is fine), and then boot Windows with the dGPU. In Windows, you can use 0xbb's gpu-switch script to set it to boot from the iGPU when you want to return to Linux. Switching to dGPU from Linux \u00b6 If you have it, remove efi=noruntime from /etc/default/grub , regenerate your grub config ( sudo grub-mkconfig -o /boot/grub/grub.cfg ), and reboot. Put this line in /etc/fstab to make efivars/nvram read only instead of deactivated: efivarfs /sys/firmware/efi/efivars efivarfs ro,remount 0 0 When you want to switch to windows run: # remount nvram with write access sudo mount efivarfs /sys/firmware/efi/efivars/ -o rw,remount -t efivarfs # remove the immutable bit from the variable sudo chattr -i /sys/firmware/efi/efivars/gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9 # delete it sudo rm /sys/firmware/efi/efivars/gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9 # remount nvram read only sudo mount efivarfs /sys/firmware/efi/efivars/ -o ro,remount -t efivarfs And reboot into Windows. If you want to enable the iGPU again, from Windows, use 0xbb's gpu-switch script (or you can do nvram fa4ce28d-b62f-4c99-9cc3-6815686e30f9:gpu-power-prefs=%01%00%00%00 in macOS recovery). VFIO GPU passthtough \u00b6 Refer to this gist for quirks.","title":"Hybrid Graphics"},{"location":"guides/hybrid-graphics/#introduction","text":"This page describes how to use the iGPU on MacBook Pros with Hybrid Graphics (2 GPUs). 13 inch MacBooks only have an iGPU, and do not need this. Using the iGPU means you can save power by turning off the more powerful AMD dGPU when you don't need it. This has been tested on the MacBookPro16,1 and the MacBookPro15,1. The 15,3 and 16,4 models are very similar and should work too.","title":"Introduction"},{"location":"guides/hybrid-graphics/#issues","text":"Resume after suspend is broken, as the GMUX (graphics multiplexer chip) doesn't connect the iGPU to the display after resuming. For this to be fixed, the method that macOS uses to make the t2 chip control GMUX needs to be determined (likely through SMC keys or ACPI). The extra battery life may make this a worthwhile tradeoff (about 3 hours to almost 6 hours on a 16,1) If using DRI_PRIME=1 on programs causes system crashes, with \" CPU CATERR \" probem reports in macOS, disable dynamic power management with the amdgpu.dpm=0 kernel argument.","title":"Issues"},{"location":"guides/hybrid-graphics/#enabling-the-igpu","text":"Note Aside from step 1, these instructions should be followed in Linux. Update macOS. BigSur can boot when the iGPU is set as the boot GPU, but this has not been tested on Catalina, and on older MacBooks , setting the iGPU as the boot GPU has stopped macOS from booting properly with graphics, and it is unknown when this was fixed (you might want to turn ssh on in macOS if you are worried about this). Compile apple-set-os loader, which spoofs macOS so that the iGPU gets enabled: git clone https://github.com/aa15032261/apple_set_os-loader cd apple_set_os-loader make #you will need efi.h to compile this, which is installed in the gnu-efi package in most distros sudo mv /boot/efi/efi/boot/bootx64.efi /boot/efi/efi/boot/bootx64_original.efi sudo cp ./bootx64.efi /boot/efi/efi/boot/bootx64.efi Reboot to Linux, you should see this at boot (the GPUs listed might be different): ================== apple_set_os loader v0.5 ================== SetOsProtocol Handle Count: 1 AppleSetOs will be loaded, press Z to disable. ----------------------- Ready to boot ------------------------ Plug in your eGPU then press any key. Booting bootx64_original.efi in 6 second(s) Connected Graphics Cards: 1002 7340 AMD - Navi 14 [Radeon RX 5500/5500M] 8086 3E9B INTEL - UHD Graphics 630 (Mobile) Press any key other than z or wait, and it should boot you into Linux. If you want a silent version of this that doesn't wait for input, you can use this fork . Your brightness control should stop working, for now . lspci should have an Intel Graphics card at address 00:02.0 . Setup this tool to allow changing the boot gpu from grub: git clone https://github.com/Redecorating/efi-gpu-power-prefs cd efi-gpu-power-prefs make #you will need efi.h to compile this, which is installed in the gnu-efi package in most distros make install sudo grub-mkconfig -o /boot/grub/grub.cfg Reboot and in the grub menu, select \"Enable iGPU\". Your computer will shutdown. Power it back on and boot linux. If you boot macOS, this will be reset and you'll have to redo this step. You display should be now connected to your Intel iGPU when booting Linux and display brightness should work again (probably with /sys/class/backlight/acpi_video0 ). Try DRI_PRIME=1 glxinfo | grep \"OpenGL renderer\"&&glxinfo | grep \"OpenGL renderer\" , you should get both AMD and Intel. Running things with DRI_PRIME=1 will make them render on your AMDGPU (some things do this automatically). You will get more battery time now, as your AMD gpu can be turned off when not needed.","title":"Enabling the iGPU"},{"location":"guides/hybrid-graphics/#use-on-with-windows","text":"In one case (has anyone else tried this?), the iGPU only works on Windows if there's no driver for it installed. Windows likes installing drivers. There might be special iGPU drivers in the Bootcamp support software for single GPU MacBooks, which might help resolve this. If you want to use the iGPU on Linux but not on Windows, you can reset the nvram variable in Linux by deleting it as described below (Writing to nvram panics the t2, but reading and deleting is fine), and then boot Windows with the dGPU. In Windows, you can use 0xbb's gpu-switch script to set it to boot from the iGPU when you want to return to Linux.","title":"Use on / with Windows"},{"location":"guides/hybrid-graphics/#switching-to-dgpu-from-linux","text":"If you have it, remove efi=noruntime from /etc/default/grub , regenerate your grub config ( sudo grub-mkconfig -o /boot/grub/grub.cfg ), and reboot. Put this line in /etc/fstab to make efivars/nvram read only instead of deactivated: efivarfs /sys/firmware/efi/efivars efivarfs ro,remount 0 0 When you want to switch to windows run: # remount nvram with write access sudo mount efivarfs /sys/firmware/efi/efivars/ -o rw,remount -t efivarfs # remove the immutable bit from the variable sudo chattr -i /sys/firmware/efi/efivars/gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9 # delete it sudo rm /sys/firmware/efi/efivars/gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9 # remount nvram read only sudo mount efivarfs /sys/firmware/efi/efivars/ -o ro,remount -t efivarfs And reboot into Windows. If you want to enable the iGPU again, from Windows, use 0xbb's gpu-switch script (or you can do nvram fa4ce28d-b62f-4c99-9cc3-6815686e30f9:gpu-power-prefs=%01%00%00%00 in macOS recovery).","title":"Switching to dGPU from Linux"},{"location":"guides/hybrid-graphics/#vfio-gpu-passthtough","text":"Refer to this gist for quirks.","title":"VFIO GPU passthtough"},{"location":"guides/kernel/","text":"Kernel \u00b6 This page explains how to compile or install linux-mbp-arch kernel and headers on non arch based distros. If you you are on an arch based distro, refer to this section . You may want to put this files into a package, so that you can manage the kernel files with your package manager. There is some guidance about this, but the process is differs between package managers. If you have issues, make sure you are running the commands here with bash . Before begining, set the directory that you want to install to. If you want to install the kernel with a package manager: pkgdir = $PWD /pkg mkdir pkg If you want to install to your current system directly (the kernel will not be managed by your package manager): pkgdir = / Compile \u00b6 To compile a kernel with the patches in linux-mbp-arch , run the following commands. You will need your distro's equivalent of these arch packages bc kmod libelf pahole cpio perl tar xz respectively build-essential libncurses-dev libssl-dev flex bison on ubuntu. git clone https://github.com/aunali1/linux-mbp-arch cd linux-mbp-arch source PKGBUILD wget https://www.kernel.org/pub/linux/kernel/v ${ pkgver //.* } .x/linux- ${ pkgver } .tar.xz tar -xf $_srcname .tar.xz prepare make all -jX # change \"X\" to the number of cpu threads you have. cd .. _package # use sudo if installing directly cd .. _package-headers # use sudo if installing directly Extract linux-mbp-arch binary without compiling \u00b6 You may need to change the version on the first line if linux-mbp-arch has been updated. This all needs to be run with sudo if you are installing directly. VER = 5 .11.22-1 cd $pkgdir wget https://dl.t2linux.org/archlinux/mbp/x86_64/linux-mbp- $VER -x86_64.pkg.tar.zst wget https://dl.t2linux.org/archlinux/mbp/x86_64/linux-mbp-headers- $VER -x86_64.pkg.tar.zst tar -xf linux-mbp-headers- $VER -x86_64.pkg.tar.zst tar -xf linux-mbp- $VER -x86_64.pkg.tar.zst rm .MTREE .PKGINFO .BUILDINFO linux-mbp- $VER -x86_64.pkg.tar.zst linux-mbp-headers- $VER -x86_64.pkg.tar.zst Packaging the kernel \u00b6 The process for this will depend on which package manager your distro uses. If you installed directly to your filesystem, don't do this. Debian based systems (apt) \u00b6 cd $pkgdir mkdir DEBIAN cat << EOF > DEBIAN/control Package: linux-mbp Version: $pkgver Architecture: amd64 EOF dpkg -b . linux-mbp.deb sudo apt install linux-mbp.deb Arch based systems (pacman) \u00b6 You do not need to follow the other instructions on this page. To compile: git clone https://github.com/aunali1/linux-mbp-arch cd linux-mbp-arch makepkg -si To install the binary, first make sure you have added aunali1's repo to /etc/pacman.conf . To do this, follow steps 6d-e and 8 from the arch install guide . Then sudo pacman -S linux-mbp linux-mbp-headers","title":"Kernel"},{"location":"guides/kernel/#kernel","text":"This page explains how to compile or install linux-mbp-arch kernel and headers on non arch based distros. If you you are on an arch based distro, refer to this section . You may want to put this files into a package, so that you can manage the kernel files with your package manager. There is some guidance about this, but the process is differs between package managers. If you have issues, make sure you are running the commands here with bash . Before begining, set the directory that you want to install to. If you want to install the kernel with a package manager: pkgdir = $PWD /pkg mkdir pkg If you want to install to your current system directly (the kernel will not be managed by your package manager): pkgdir = /","title":"Kernel"},{"location":"guides/kernel/#compile","text":"To compile a kernel with the patches in linux-mbp-arch , run the following commands. You will need your distro's equivalent of these arch packages bc kmod libelf pahole cpio perl tar xz respectively build-essential libncurses-dev libssl-dev flex bison on ubuntu. git clone https://github.com/aunali1/linux-mbp-arch cd linux-mbp-arch source PKGBUILD wget https://www.kernel.org/pub/linux/kernel/v ${ pkgver //.* } .x/linux- ${ pkgver } .tar.xz tar -xf $_srcname .tar.xz prepare make all -jX # change \"X\" to the number of cpu threads you have. cd .. _package # use sudo if installing directly cd .. _package-headers # use sudo if installing directly","title":"Compile"},{"location":"guides/kernel/#extract-linux-mbp-arch-binary-without-compiling","text":"You may need to change the version on the first line if linux-mbp-arch has been updated. This all needs to be run with sudo if you are installing directly. VER = 5 .11.22-1 cd $pkgdir wget https://dl.t2linux.org/archlinux/mbp/x86_64/linux-mbp- $VER -x86_64.pkg.tar.zst wget https://dl.t2linux.org/archlinux/mbp/x86_64/linux-mbp-headers- $VER -x86_64.pkg.tar.zst tar -xf linux-mbp-headers- $VER -x86_64.pkg.tar.zst tar -xf linux-mbp- $VER -x86_64.pkg.tar.zst rm .MTREE .PKGINFO .BUILDINFO linux-mbp- $VER -x86_64.pkg.tar.zst linux-mbp-headers- $VER -x86_64.pkg.tar.zst","title":"Extract linux-mbp-arch binary without compiling"},{"location":"guides/kernel/#packaging-the-kernel","text":"The process for this will depend on which package manager your distro uses. If you installed directly to your filesystem, don't do this.","title":"Packaging the kernel"},{"location":"guides/kernel/#debian-based-systems-apt","text":"cd $pkgdir mkdir DEBIAN cat << EOF > DEBIAN/control Package: linux-mbp Version: $pkgver Architecture: amd64 EOF dpkg -b . linux-mbp.deb sudo apt install linux-mbp.deb","title":"Debian based systems (apt)"},{"location":"guides/kernel/#arch-based-systems-pacman","text":"You do not need to follow the other instructions on this page. To compile: git clone https://github.com/aunali1/linux-mbp-arch cd linux-mbp-arch makepkg -si To install the binary, first make sure you have added aunali1's repo to /etc/pacman.conf . To do this, follow steps 6d-e and 8 from the arch install guide . Then sudo pacman -S linux-mbp linux-mbp-headers","title":"Arch based systems (pacman)"},{"location":"guides/refind/","text":"Introduction \u00b6 This guide shall help you install the rEFInd Boot Manager in your T2 Mac in the safest possible way. Though there are various options to get rEFInd on your Mac, it is recommended to follow the instructions given below unless you know what you are doing. Installation \u00b6 All steps given here have to be performed on macOS . You will also need to have secure boot disabled . With the help of disk utility, create a 100-200MB MS-DOS FAT partition and label it as REFIND . Get a binary zip file of rEFInd from here . The binary zip file of rEFInd shall be available in the downloads folder by the name of refind-bin-<VERSION>.zip , where <VERSION> represents the version of rEFInd you have downloaded. For eg:- If you have downloaded 0.13.2 version, it will be available as refind-bin-0.13.2.zip . Extract the zip file (can be done by double clicking on it). The contents shall be extracted in a folder named refind-bin-<VERSION> . Here <VERSION> means the same as described in step 3. Open the terminal and run diskutil list to get the disk identifier of the REFIND volume created in step 1. A sample output is given below:- /dev/disk0 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *500.3 GB disk0 1: EFI \u2068EFI\u2069 314.6 MB disk0s1 2: Apple_APFS \u2068Container disk1\u2069 284.0 GB disk0s2 3: Microsoft Basic Data \u2068Windows\u2069 215.9 GB disk0s3 4: Microsoft Basic Data \u2068REFIND\u2069 103.8 MB disk0s4 /dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme - +284.0 GB disk1 Physical Store disk0s2 1: APFS Volume \u2068macOS\u2069 15.3 GB disk1s1 2: APFS Snapshot \u2068com.apple.os.update-...\u2069 15.3 GB disk1s1s1 3: APFS Volume \u2068macOS - Data\u2069 33.9 GB disk1s2 4: APFS Volume \u2068Preboot\u2069 567.1 MB disk1s3 5: APFS Volume \u2068Recovery\u2069 626.1 MB disk1s4 6: APFS Volume \u2068VM\u2069 20.5 KB disk1s5 Here, the disk indentifier of REFIND volume is disk0s4 . Now run the following in the terminal. Make sure you replace disk0s4 (found in 4th, 5th, 6th and 7th line of the command given below) with the disk identifier you got in the output as described in step 5 and refind-bin-0.13.2 (found in 1st line of the command given below) with the name of folder which was created in step 4. cd ~/Downloads/refind-bin-0.13.2 xattr -rd com.apple.quarantine . sed -i '' \"s/sed -i 's/sed -i '' 's/g\" refind-install diskutil unmount disk0s4 sudo ./refind-install --usedefault /dev/disk0s4 diskutil unmount disk0s4 diskutil mount disk0s4 sudo rmdir /tmp/refind_install Now run:- bless --folder /Volumes/REFIND/EFI/BOOT --label rEFInd This will change the label in the Mac Startup Manager for rEFInd from EFI Boot to rEFInd . Configuration \u00b6 Though rEFInd has many configuration options, some basic configuration is required for a smoother experience on T2 Macs. Removing BIOS entries \u00b6 Macs with T2 chip cannot BIOS boot. So it is advised to remove the BIOS entries. For that, open finder, and then open the REFIND volume. Add the line given below at the end of EFI/BOOT/refind.conf file by editing it with a text editor. scanfor internal,external,optical,manual In case you face the error saying The document \u201crefind.conf\u201d could not be saved. , copy the refind.conf file to any place in your home directory (Downloads folder for example) and do the editing over there. After editing replace the refind.conf file in the REFIND volume with the newly edited file. Hiding text on booting an OS using rEFInd (Optional) \u00b6 In case you boot an OS other than macOS using rEFInd, it shows some debug text while booting it. In order to get a smooth boot experience simiar to the Mac Startup Manager, add the following line to EFI/BOOT/refind.conf , just as you did to remove BIOS entries. use_graphics_for osx,linux,windows,grub Preventing use of NVRAM (Likely to have been enabled already) \u00b6 Preventing use of NVRAM is must as T2 doesn\u2019t like someone to touch the NVRAM. In latest editions of rEFInd, preventing use of NVRAM is enabled by default. You may confirm this by checking presence of use_nvram false line somewhere in the middle of the refind.conf file (the one mentioned in above instructions). Make sure it is not commented (doesn\u2019t have a # before the line). If it is then remove the # . In case the line is missing, add it at the end of refind.conf file. In case the line use_nvram true is present instead, change true to false . Making rEFInd default at startup \u00b6 After correctly installing and configuring rEFInd, we need to make it boot by default on every startup. In order to do so, restart your Mac and press and hold down the Option key. When the startup manager gets displayed, release the Option key. Now press and hold the Control key and without releasing the Control key, boot into the rEFInd startup disk . Now on every startup, rEFInd will get displayed by default. Warning This step has to be performed every time you update macOS to a newer version, as this makes the macOS startup disk as the default startup disk. Fixing blank screen on booting macOS using rEFInd \u00b6 Sometimes, while booting into macOS using rEFInd, users get stuck at a blank screen. This bug is observed only if you have performed a force/unsafe shutdown by pressing and holding the power button in the previous boot. Some users have also faced it in the first macOS boot using rEFInd on new rEFInd installations. In order to fix it, turn off your Mac and restart while holding down the Option key. Release the Option key when the Mac Startup Manager gets displayed. Boot into macOS using the Mac Startup Manager. This shall fix the bug for subsequent boots. Uninstalling rEFInd \u00b6 In case you wish to uninstall rEFInd, boot into macOS and follow the steps below :- Open the Disk Utility Select the partition on which macOS is installed (it generally has the label Macintosh HD until you have renamed it manually). Click on Partition . Select the REFIND partition and click - to remove it. Your macOS partition should expand to fill the space that rEFInd was in. Click on Apply . Disk Utility will remove the REFIND partition and expand your macOS partition. This may take a while, but do not interrupt this process . Change the default startup disk to the OS you wish to be boot by default. If the OS you wish is macOS or Windows , follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If the OS you wish is Linux , follow the Startup Manager Guide . References and External links \u00b6 Reference - This guide has been inspired from here. rEFInd - Official website of rEFInd. Theming rEFInd - Useful guide to set custom themes for rEFInd.","title":"rEFInd"},{"location":"guides/refind/#introduction","text":"This guide shall help you install the rEFInd Boot Manager in your T2 Mac in the safest possible way. Though there are various options to get rEFInd on your Mac, it is recommended to follow the instructions given below unless you know what you are doing.","title":"Introduction"},{"location":"guides/refind/#installation","text":"All steps given here have to be performed on macOS . You will also need to have secure boot disabled . With the help of disk utility, create a 100-200MB MS-DOS FAT partition and label it as REFIND . Get a binary zip file of rEFInd from here . The binary zip file of rEFInd shall be available in the downloads folder by the name of refind-bin-<VERSION>.zip , where <VERSION> represents the version of rEFInd you have downloaded. For eg:- If you have downloaded 0.13.2 version, it will be available as refind-bin-0.13.2.zip . Extract the zip file (can be done by double clicking on it). The contents shall be extracted in a folder named refind-bin-<VERSION> . Here <VERSION> means the same as described in step 3. Open the terminal and run diskutil list to get the disk identifier of the REFIND volume created in step 1. A sample output is given below:- /dev/disk0 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *500.3 GB disk0 1: EFI \u2068EFI\u2069 314.6 MB disk0s1 2: Apple_APFS \u2068Container disk1\u2069 284.0 GB disk0s2 3: Microsoft Basic Data \u2068Windows\u2069 215.9 GB disk0s3 4: Microsoft Basic Data \u2068REFIND\u2069 103.8 MB disk0s4 /dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme - +284.0 GB disk1 Physical Store disk0s2 1: APFS Volume \u2068macOS\u2069 15.3 GB disk1s1 2: APFS Snapshot \u2068com.apple.os.update-...\u2069 15.3 GB disk1s1s1 3: APFS Volume \u2068macOS - Data\u2069 33.9 GB disk1s2 4: APFS Volume \u2068Preboot\u2069 567.1 MB disk1s3 5: APFS Volume \u2068Recovery\u2069 626.1 MB disk1s4 6: APFS Volume \u2068VM\u2069 20.5 KB disk1s5 Here, the disk indentifier of REFIND volume is disk0s4 . Now run the following in the terminal. Make sure you replace disk0s4 (found in 4th, 5th, 6th and 7th line of the command given below) with the disk identifier you got in the output as described in step 5 and refind-bin-0.13.2 (found in 1st line of the command given below) with the name of folder which was created in step 4. cd ~/Downloads/refind-bin-0.13.2 xattr -rd com.apple.quarantine . sed -i '' \"s/sed -i 's/sed -i '' 's/g\" refind-install diskutil unmount disk0s4 sudo ./refind-install --usedefault /dev/disk0s4 diskutil unmount disk0s4 diskutil mount disk0s4 sudo rmdir /tmp/refind_install Now run:- bless --folder /Volumes/REFIND/EFI/BOOT --label rEFInd This will change the label in the Mac Startup Manager for rEFInd from EFI Boot to rEFInd .","title":"Installation"},{"location":"guides/refind/#configuration","text":"Though rEFInd has many configuration options, some basic configuration is required for a smoother experience on T2 Macs.","title":"Configuration"},{"location":"guides/refind/#removing-bios-entries","text":"Macs with T2 chip cannot BIOS boot. So it is advised to remove the BIOS entries. For that, open finder, and then open the REFIND volume. Add the line given below at the end of EFI/BOOT/refind.conf file by editing it with a text editor. scanfor internal,external,optical,manual In case you face the error saying The document \u201crefind.conf\u201d could not be saved. , copy the refind.conf file to any place in your home directory (Downloads folder for example) and do the editing over there. After editing replace the refind.conf file in the REFIND volume with the newly edited file.","title":"Removing BIOS entries"},{"location":"guides/refind/#hiding-text-on-booting-an-os-using-refind-optional","text":"In case you boot an OS other than macOS using rEFInd, it shows some debug text while booting it. In order to get a smooth boot experience simiar to the Mac Startup Manager, add the following line to EFI/BOOT/refind.conf , just as you did to remove BIOS entries. use_graphics_for osx,linux,windows,grub","title":"Hiding text on booting an OS using rEFInd (Optional)"},{"location":"guides/refind/#preventing-use-of-nvram-likely-to-have-been-enabled-already","text":"Preventing use of NVRAM is must as T2 doesn\u2019t like someone to touch the NVRAM. In latest editions of rEFInd, preventing use of NVRAM is enabled by default. You may confirm this by checking presence of use_nvram false line somewhere in the middle of the refind.conf file (the one mentioned in above instructions). Make sure it is not commented (doesn\u2019t have a # before the line). If it is then remove the # . In case the line is missing, add it at the end of refind.conf file. In case the line use_nvram true is present instead, change true to false .","title":"Preventing use of NVRAM (Likely to have been enabled already)"},{"location":"guides/refind/#making-refind-default-at-startup","text":"After correctly installing and configuring rEFInd, we need to make it boot by default on every startup. In order to do so, restart your Mac and press and hold down the Option key. When the startup manager gets displayed, release the Option key. Now press and hold the Control key and without releasing the Control key, boot into the rEFInd startup disk . Now on every startup, rEFInd will get displayed by default. Warning This step has to be performed every time you update macOS to a newer version, as this makes the macOS startup disk as the default startup disk.","title":"Making rEFInd default at startup"},{"location":"guides/refind/#fixing-blank-screen-on-booting-macos-using-refind","text":"Sometimes, while booting into macOS using rEFInd, users get stuck at a blank screen. This bug is observed only if you have performed a force/unsafe shutdown by pressing and holding the power button in the previous boot. Some users have also faced it in the first macOS boot using rEFInd on new rEFInd installations. In order to fix it, turn off your Mac and restart while holding down the Option key. Release the Option key when the Mac Startup Manager gets displayed. Boot into macOS using the Mac Startup Manager. This shall fix the bug for subsequent boots.","title":"Fixing blank screen on booting macOS using rEFInd"},{"location":"guides/refind/#uninstalling-refind","text":"In case you wish to uninstall rEFInd, boot into macOS and follow the steps below :- Open the Disk Utility Select the partition on which macOS is installed (it generally has the label Macintosh HD until you have renamed it manually). Click on Partition . Select the REFIND partition and click - to remove it. Your macOS partition should expand to fill the space that rEFInd was in. Click on Apply . Disk Utility will remove the REFIND partition and expand your macOS partition. This may take a while, but do not interrupt this process . Change the default startup disk to the OS you wish to be boot by default. If the OS you wish is macOS or Windows , follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If the OS you wish is Linux , follow the Startup Manager Guide .","title":"Uninstalling rEFInd"},{"location":"guides/refind/#references-and-external-links","text":"Reference - This guide has been inspired from here. rEFInd - Official website of rEFInd. Theming rEFInd - Useful guide to set custom themes for rEFInd.","title":"References and External links"},{"location":"guides/startup-manager/","text":"Introduction \u00b6 This guide shall help you perform 2 tasks. Firstly you shall be able to set the correct label for your Linux startup disk on Mac startup manager and replace the EFI Boot label, and give it an icon. Secondly you shall be able to make Linux startup disk as the default startup disk in case you wish to do so. The steps to perform the above tasks vary as per the way you have installed Linux, and thus check out the guide under the heading that applies to your case. Setting labels \u00b6 Setting label in case you are using the EFI partition available by default in Mac and are on a dual boot system \u00b6 In this case, boot into macOS, open a terminal window and run :- bless --folder /Volumes/EFI/EFI/BOOT --label <YOUR DISTRO'S NAME> Replace <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu, run :- bless --folder /Volumes/EFI/EFI/BOOT --label Ubuntu Setting label in case you are using the same EFI partition for Windows and Linux \u00b6 More details about this can be found in the triple boot guide . In this case the Windows startup disk is used to boot both Windows and Linux. Thus, it is not recommended to set special labels for Linux as it may cause errors with the Windows startup disk. Setting label in case you are using a seperate EFI partition for Linux \u00b6 More details about this can be found in the triple boot guide . In this case, boot into macOS, open a terminal window and run :- bless --folder /Volumes/<NAME OF SEPERATE EFI PARTITION>/EFI/BOOT --label <YOUR DISTRO'S NAME> Replace <NAME OF SEPERATE EFI PARTITION> with the label you set using in the above triple boot guide and <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu and you set the label to EFI2 , run :- bless --folder /Volumes/EFI2/EFI/BOOT --label Ubuntu Setting the boot option icons in macOS Startup Manager \u00b6 In case you are using the same EFI partition for Windows and Linux, then your Windows startup disk already has an icon. Thus you needn't set any boot icon. In other cases, put an icns image file with your desired icon in the top directory of the disk that the bootloader of the menu entry is on, and call it .VolumeIcon.icns . It will now appear as that disk's boot option's icon. Setting Linux startup disk as the default startup disk \u00b6 Warning In case you upgrade macOS to a newer version, the default startup disk gets changed to the macOS startup disk. Thus you will have to follow the instructions to make the Linux startup disk as default every time after you upgrade macOS. Case of common EFI partition for Windows and Linux \u00b6 In this case you will have to set the Windows startup disk as the default startup disk. It is recommended to follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If this method is not working for you, then follow the instructions given in Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system section, where you have to consider the Windows startup disk as the Linux startup disk. Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system \u00b6 In these cases, start your Mac and press and hold down the Option key. When the startup manager gets displayed, release the option key. Now press and hold the Control key and without releasing the Control key, boot into the Linux startup disk as you usually do. This will make it the default startup disk.","title":"Startup Manager"},{"location":"guides/startup-manager/#introduction","text":"This guide shall help you perform 2 tasks. Firstly you shall be able to set the correct label for your Linux startup disk on Mac startup manager and replace the EFI Boot label, and give it an icon. Secondly you shall be able to make Linux startup disk as the default startup disk in case you wish to do so. The steps to perform the above tasks vary as per the way you have installed Linux, and thus check out the guide under the heading that applies to your case.","title":"Introduction"},{"location":"guides/startup-manager/#setting-labels","text":"","title":"Setting labels"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-the-efi-partition-available-by-default-in-mac-and-are-on-a-dual-boot-system","text":"In this case, boot into macOS, open a terminal window and run :- bless --folder /Volumes/EFI/EFI/BOOT --label <YOUR DISTRO'S NAME> Replace <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu, run :- bless --folder /Volumes/EFI/EFI/BOOT --label Ubuntu","title":"Setting label in case you are using the EFI partition available by default in Mac and are on a dual boot system"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-the-same-efi-partition-for-windows-and-linux","text":"More details about this can be found in the triple boot guide . In this case the Windows startup disk is used to boot both Windows and Linux. Thus, it is not recommended to set special labels for Linux as it may cause errors with the Windows startup disk.","title":"Setting label in case you are using the same EFI partition for Windows and Linux"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-a-seperate-efi-partition-for-linux","text":"More details about this can be found in the triple boot guide . In this case, boot into macOS, open a terminal window and run :- bless --folder /Volumes/<NAME OF SEPERATE EFI PARTITION>/EFI/BOOT --label <YOUR DISTRO'S NAME> Replace <NAME OF SEPERATE EFI PARTITION> with the label you set using in the above triple boot guide and <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu and you set the label to EFI2 , run :- bless --folder /Volumes/EFI2/EFI/BOOT --label Ubuntu","title":"Setting label in case you are using a seperate EFI partition for Linux"},{"location":"guides/startup-manager/#setting-the-boot-option-icons-in-macos-startup-manager","text":"In case you are using the same EFI partition for Windows and Linux, then your Windows startup disk already has an icon. Thus you needn't set any boot icon. In other cases, put an icns image file with your desired icon in the top directory of the disk that the bootloader of the menu entry is on, and call it .VolumeIcon.icns . It will now appear as that disk's boot option's icon.","title":"Setting the boot option icons in macOS Startup Manager"},{"location":"guides/startup-manager/#setting-linux-startup-disk-as-the-default-startup-disk","text":"Warning In case you upgrade macOS to a newer version, the default startup disk gets changed to the macOS startup disk. Thus you will have to follow the instructions to make the Linux startup disk as default every time after you upgrade macOS.","title":"Setting Linux startup disk as the default startup disk"},{"location":"guides/startup-manager/#case-of-common-efi-partition-for-windows-and-linux","text":"In this case you will have to set the Windows startup disk as the default startup disk. It is recommended to follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If this method is not working for you, then follow the instructions given in Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system section, where you have to consider the Windows startup disk as the Linux startup disk.","title":"Case of common EFI partition for Windows and Linux"},{"location":"guides/startup-manager/#case-of-seperate-efi-partition-for-linux-as-well-as-case-of-using-the-efi-partition-available-by-default-in-mac-and-are-on-a-dual-boot-system","text":"In these cases, start your Mac and press and hold down the Option key. When the startup manager gets displayed, release the option key. Now press and hold the Control key and without releasing the Control key, boot into the Linux startup disk as you usually do. This will make it the default startup disk.","title":"Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system"},{"location":"guides/uninstall/","text":"Introduction \u00b6 This page explains how to remove Linux from your Mac. It shouldn't matter what distro you are using. Removing Linux partitions \u00b6 You may want to do this from macOS Recovery as you will be resizing (expanding) your startup disk, although you don't need to. In macOS open Disk Utility Click \"View\" then \"Show all devices\" Select your Apple SSD Click \"Partition\". If it suggests adding volumes, don't. Select your Linux partition, and click - to remove it. Your macOS partition should expand to fill the space that Linux was in. Click apply. Disk Utility will remove your Linux partition and expand your macOS partition. This may take a while, but do not interrupt this process . While it does this, consider the fact that you didn't need admin to remove your Linux partition. Removing the Linux boot-loader \u00b6 If using a separate EFI partition \u00b6 Follow the same steps to remove the seperate EFI partition as you followed to remove the Linux partition. If using the EFI partition already available in your Mac. \u00b6 In macOS run sudo diskutil mount disk0s1 , which mounts your EFI System Partition. There will now be an EFI disk visible in Finder, open it and go into the EFI folder (within the EFI disk). Remove any folders other than Apple , Boot , or Microsoft . Enter the Boot folder and remove bootx64.efi . If you have Windows installed with Bootcamp, Enter Microsoft folder and then the Boot folder inside the Microsoft folder and copy bootmgfw.efi . Paste it in that Boot folder in the EFI folder of the EFI disk from where you had deleted bootx64.efi . Now rename the newly copied bootmgfw.efi to bootx64.efi . Be careful not to delete the Windows bootloader. Enable Secure Boot (Optional) \u00b6 Boot to macOS Recovery by holding \u2318-R as you turn your Mac on. Enable Secure Boot as described here .","title":"Uninstall"},{"location":"guides/uninstall/#introduction","text":"This page explains how to remove Linux from your Mac. It shouldn't matter what distro you are using.","title":"Introduction"},{"location":"guides/uninstall/#removing-linux-partitions","text":"You may want to do this from macOS Recovery as you will be resizing (expanding) your startup disk, although you don't need to. In macOS open Disk Utility Click \"View\" then \"Show all devices\" Select your Apple SSD Click \"Partition\". If it suggests adding volumes, don't. Select your Linux partition, and click - to remove it. Your macOS partition should expand to fill the space that Linux was in. Click apply. Disk Utility will remove your Linux partition and expand your macOS partition. This may take a while, but do not interrupt this process . While it does this, consider the fact that you didn't need admin to remove your Linux partition.","title":"Removing Linux partitions"},{"location":"guides/uninstall/#removing-the-linux-boot-loader","text":"","title":"Removing the Linux boot-loader"},{"location":"guides/uninstall/#if-using-a-separate-efi-partition","text":"Follow the same steps to remove the seperate EFI partition as you followed to remove the Linux partition.","title":"If using a separate EFI partition"},{"location":"guides/uninstall/#if-using-the-efi-partition-already-available-in-your-mac","text":"In macOS run sudo diskutil mount disk0s1 , which mounts your EFI System Partition. There will now be an EFI disk visible in Finder, open it and go into the EFI folder (within the EFI disk). Remove any folders other than Apple , Boot , or Microsoft . Enter the Boot folder and remove bootx64.efi . If you have Windows installed with Bootcamp, Enter Microsoft folder and then the Boot folder inside the Microsoft folder and copy bootmgfw.efi . Paste it in that Boot folder in the EFI folder of the EFI disk from where you had deleted bootx64.efi . Now rename the newly copied bootmgfw.efi to bootx64.efi . Be careful not to delete the Windows bootloader.","title":"If using the EFI partition already available in your Mac."},{"location":"guides/uninstall/#enable-secure-boot-optional","text":"Boot to macOS Recovery by holding \u2318-R as you turn your Mac on. Enable Secure Boot as described here .","title":"Enable Secure Boot (Optional)"},{"location":"guides/wifi/","text":"Introduction \u00b6 This page is a step by step guide to get wifi working on supported models. Getting the right firmware \u00b6 There are two patchsets for the linux kernel that add wifi support, but they each use wifi chipset firmware from different versions of macOS, and support different wifi chipsets. Please use the table below to check which patchsets will work for your model. You can check your Model Identifier like this: On macOS: system_profiler SPHardwareDataType | grep \"Model Identifier\" On Linux: cat /sys/devices/virtual/dmi/id/product_name If unknown, your Mac's wifi chipset number can be found like this: On macOS: ioreg -l | grep RequestedFiles , the number will be within the folder names, i.e. \"C- 4364 __s-B3\" (Your model's island will also be in this command's output). On Linux: lspci -d '14e4:*' , this will also tell you the \"Rev\"/Revision. Model Identifier Chipset Revision Island Firmware Options MacBookPro16,1 BCM4364 4 Bali Big Sur MacBookPro16,2 BCM4364 4 Trinidad Big Sur MacBookPro16,3 BCM4377 4 Tahiti Big Sur MacBookPro16,4 BCM4364 4 Bali? Big Sur MacBookPro15,1 BCM4364 3 Kauai Mojave / Big Sur MacBookPro15,2 BCM4364 3 Maui Mojave / Big Sur MacBookPro15,3 BCM4364 3 Kauai Mojave / Big Sur MacBookPro15,4 BCM4377 4 Formosa Big Sur MacBookAir9,1 BCM4377 4 Fiji Big Sur MacBookAir8,1 BCM4355 ? Hawaii Mojave / Big Sur MacBookAir8,2 BCM4355 0c Hawaii Mojave / Big Sur MacMini8,1 BCM4364 3 Lanai Mojave / Big Sur MacPro7,1 BCM4364 4 Kahana Big Sur iMac20,1 BCM4364 4 Hanauma Big Sur iMac20,2 BCM4364 4 Kure Big Sur iMac19,1* BCM4364 3 Nihau Mojave / Big Sur iMac19,2* BCM4364 3 Nihau Mojave / Big Sur iMacPro1,1 BCM4364 ? Ekans? Mojave / Big Sur? *iMac19,x don't have the T2 chip, but they have the same type of wifi chip as T2 Macs. If there is missing/uncertain information for your model, please open a pull request or issue or mention it on the discord . Retrieving Firmware \u00b6 Run ioreg -l | grep RequestedFiles in macOS Terminal. Note down the output, and make sure you also know your Model Identifier. The output will be similar to this: \"RequestedFiles\" = ( { \"Firmware\" = \"C-4364s-B2/kauai.trx\" , \"TxCap\" = \"C-4364s-B2/kauai-X3.txcb\" , \"Regulatory\" = \"C-4364s-B2/kauai-X3.clmb\" , \"NVRAM\" = \"C-4364s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\" } ) You will next need to retrieve three of the four files listed by that command (the .trx \"Firmware\" file, the .clmb \"Regulatory\" file, and the .txt \"NVRAM\" file). The source of these files depends on which firmware type you will use. Copy them to somewhere that you can access them. Mojave Firmware \u00b6 The default kernels for mbp-ubuntu , mbp-manjaro , mbp-arch and mbp15-fedora use Mojave Firmware. This older firmware is archived at https://packages.aunali1.com/apple/wifi-fw/18G2022/ . Big Sur Firmware \u00b6 The default kernels for mbp16-fedora and mbp-nixos use Big Sur firmware. Also, starting from fedora 35 , all releases use Big Sur firmware. For Ubuntu , the \"t2-j-bigsur\", \"t2-hwe-bigsur\" and \"t2-big-sur\" variant kernels use Big Sur firmware too. You can get them from here or this alternative link . If you are a 16,1 or 16,2 user and want support for both bluetooth and wifi, then you will have to install a kernel available on the alternative link given above. Make sure that your DKMS Modules are updated and you install linux-headers before linux-image . There are also kernels available for Arch based distros (like Arch Linux and Manjaro) but you can compile it yourself if you need/want to. This firmware is available in /usr/share/firmware/wifi in macOS Big Sur installations, or online at https://github.com/AdityaGarg8/macOS-Big-Sur-WiFi-Firmware . If you get firmware from macOS, make sure that if the files are aliases, that you right click on them, and select \"Show Original\" to get the actual files. If your model identifier is 16,1 you can take a shortcut and get the firmware files from https://github.com/AdityaGarg8/mbp-16.1-wifi-firmware by following the instructions given there. If you unable to get working firmware files from there then follow the instructions given for other models. Compiling a kernel for using Big Sur firmware \u00b6 Follow the kernel compiling guide , but make sure to use https://github.com/jamlam/mbp-16.1-linux-wifi instead of https://github.com/aunali1/linux-mbp-arch as the patchset repository. Renaming Firmware \u00b6 Rename the .trx \"Firmware\" file to brcmfmac4364-pcie.bin , but change 4364 to your wifi chipset number. Do the same for the .clmb \"Regulatory\" file and rename it to brcmfmac4364-pcie.clm_blob . Again, change 4364 to your chipset number. Lastly, rename the .txt \"NVRAM\" file to brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt but in addition to changing 4364 to your chipset number, change MacBookPro15,1 to your Model Identifier. Installing Firmware \u00b6 Now that you got those 3 files, move them to /lib/firmware/brcm/ . Check that the files are in place with ls -l /lib/firmware/brcm|grep -E \"43(64|55|77)\" . The output should look something like this -rw-r--r--. 1 root root 12860 Mar 1 12:44 brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt -rw-r--r--. 1 root root 922647 Mar 1 12:44 brcmfmac4364-pcie.bin -rw-r--r--. 1 root root 33226 Mar 1 12:44 brcmfmac4364-pcie.clm_blob You can now test out if the files work by running sudo modprobe -r brcmfmac && sudo modprobe brcmfmac and looking at the list of wifi access points nearby. You can optionally check the logs to confirm correct loading of the firmware using sudo journalctl -k --grep=brcmfmac , the output should look similar to this May 09 11:55:54 hostname kernel: usbcore: registered new interface driver brcmfmac May 09 11:55:54 hostname kernel: brcmfmac 0000:03:00.0: enabling device (0000 -> 0002) May 09 11:55:54 hostname kernel: brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4364-pcie for chip BCM4364/3 May 09 11:55:55 hostname kernel: brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4364-pcie for chip BCM4364/3 May 09 11:55:55 hostname kernel: brcmfmac: brcmf_c_preinit_dcmds: Firmware: BCM4364/3 wl0: Oct 23 2019 08:32:36 version 9.137.11.0.32.6.36 FWID 01-671ec60c Fixing unstable WPA2 using iwd \u00b6 Using iwd is technically not needed for using wifi. But if your are facing unstable WPA2 issues and have to follow step 3 of the above section every time you connect to a WPA2 network, you will have to follow this section. If your connection is stable, you needn't follow this section. Instructions in this section might be different for the distribution that you are trying to install. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Some users have experienced issues with iwd Refer to warnings for iwd version incompatibilities Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd). sudo systemctl enable --now iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advised to restart iwd: sudo systemctl restart iwd , or reprobe the wifi kernel module: sudo modprobe -r brcmfmac && sudo modprobe brcmfmac . Fixing suspend on models with BCM4377 \u00b6 Models with BCM4377 may have WiFi stop working after suspending. It can be fixed but only when using the s2idle sleep state, which doen't save as much power as normal suspend. To use the s2idle sleep state, add this to /etc/systemd/sleep.conf : [Sleep] SuspendState = freeze AllowHibernation = no Then to make wifi work after resuming from s2idle , create /lib/systemd/system-sleep/bcm4377-suspend.sh with the following contents: #!/bin/sh PATH = /sbin:/usr/sbin:/bin:/usr/bin case \" $1 \" in pre ) echo \"Prevent D3cold on 'brcmfmac' devices for $2 ...\" | tee -a /var/log/suspend-brcm.log find /sys/bus/pci/drivers/brcmfmac/ | awk -F/ '{print $NF}' | grep -P '^[0-9a-f:.]+$' | while read dev ; do echo 0 > \"/sys/bus/pci/devices/ $dev /d3cold_allowed\" ; done echo \"RF block on 'brcmfmac' devices for $2 ...\" | tee -a /var/log/suspend-brcm.log find /sys/bus/pci/drivers/brcmfmac/ | awk -F/ '{print $NF}' | grep -P '^[0-9a-f:.]+$' | while read dev ; do find \"/sys/bus/pci/devices/ $dev /ieee80211/\" | grep -P '/phy\\d+/rfkill\\d+/soft$' ; done | while read rfkillsoft ; do echo 1 > \" $rfkillsoft \" ; done ;; post ) echo \"RF unblock on 'brcmfmac' devices for $2 ...\" | tee -a /var/log/suspend-brcm.log find /sys/bus/pci/drivers/brcmfmac/ | awk -F/ '{print $NF}' | grep -P '^[0-9a-f:.]+$' | while read dev ; do find \"/sys/bus/pci/devices/ $dev /ieee80211/\" | grep -P '/phy\\d+/rfkill\\d+/soft$' ; done | while read rfkillsoft ; do echo 0 > \" $rfkillsoft \" ; done ;; esac exit 0 Make it executable with sudo chmod +x /lib/systemd/system-sleep/bcm4377-suspend.sh .","title":"Wifi"},{"location":"guides/wifi/#introduction","text":"This page is a step by step guide to get wifi working on supported models.","title":"Introduction"},{"location":"guides/wifi/#getting-the-right-firmware","text":"There are two patchsets for the linux kernel that add wifi support, but they each use wifi chipset firmware from different versions of macOS, and support different wifi chipsets. Please use the table below to check which patchsets will work for your model. You can check your Model Identifier like this: On macOS: system_profiler SPHardwareDataType | grep \"Model Identifier\" On Linux: cat /sys/devices/virtual/dmi/id/product_name If unknown, your Mac's wifi chipset number can be found like this: On macOS: ioreg -l | grep RequestedFiles , the number will be within the folder names, i.e. \"C- 4364 __s-B3\" (Your model's island will also be in this command's output). On Linux: lspci -d '14e4:*' , this will also tell you the \"Rev\"/Revision. Model Identifier Chipset Revision Island Firmware Options MacBookPro16,1 BCM4364 4 Bali Big Sur MacBookPro16,2 BCM4364 4 Trinidad Big Sur MacBookPro16,3 BCM4377 4 Tahiti Big Sur MacBookPro16,4 BCM4364 4 Bali? Big Sur MacBookPro15,1 BCM4364 3 Kauai Mojave / Big Sur MacBookPro15,2 BCM4364 3 Maui Mojave / Big Sur MacBookPro15,3 BCM4364 3 Kauai Mojave / Big Sur MacBookPro15,4 BCM4377 4 Formosa Big Sur MacBookAir9,1 BCM4377 4 Fiji Big Sur MacBookAir8,1 BCM4355 ? Hawaii Mojave / Big Sur MacBookAir8,2 BCM4355 0c Hawaii Mojave / Big Sur MacMini8,1 BCM4364 3 Lanai Mojave / Big Sur MacPro7,1 BCM4364 4 Kahana Big Sur iMac20,1 BCM4364 4 Hanauma Big Sur iMac20,2 BCM4364 4 Kure Big Sur iMac19,1* BCM4364 3 Nihau Mojave / Big Sur iMac19,2* BCM4364 3 Nihau Mojave / Big Sur iMacPro1,1 BCM4364 ? Ekans? Mojave / Big Sur? *iMac19,x don't have the T2 chip, but they have the same type of wifi chip as T2 Macs. If there is missing/uncertain information for your model, please open a pull request or issue or mention it on the discord .","title":"Getting the right firmware"},{"location":"guides/wifi/#retrieving-firmware","text":"Run ioreg -l | grep RequestedFiles in macOS Terminal. Note down the output, and make sure you also know your Model Identifier. The output will be similar to this: \"RequestedFiles\" = ( { \"Firmware\" = \"C-4364s-B2/kauai.trx\" , \"TxCap\" = \"C-4364s-B2/kauai-X3.txcb\" , \"Regulatory\" = \"C-4364s-B2/kauai-X3.clmb\" , \"NVRAM\" = \"C-4364s-B2/P-kauai-X3_M-HRPN_V-u__m-7.5.txt\" } ) You will next need to retrieve three of the four files listed by that command (the .trx \"Firmware\" file, the .clmb \"Regulatory\" file, and the .txt \"NVRAM\" file). The source of these files depends on which firmware type you will use. Copy them to somewhere that you can access them.","title":"Retrieving Firmware"},{"location":"guides/wifi/#mojave-firmware","text":"The default kernels for mbp-ubuntu , mbp-manjaro , mbp-arch and mbp15-fedora use Mojave Firmware. This older firmware is archived at https://packages.aunali1.com/apple/wifi-fw/18G2022/ .","title":"Mojave Firmware"},{"location":"guides/wifi/#big-sur-firmware","text":"The default kernels for mbp16-fedora and mbp-nixos use Big Sur firmware. Also, starting from fedora 35 , all releases use Big Sur firmware. For Ubuntu , the \"t2-j-bigsur\", \"t2-hwe-bigsur\" and \"t2-big-sur\" variant kernels use Big Sur firmware too. You can get them from here or this alternative link . If you are a 16,1 or 16,2 user and want support for both bluetooth and wifi, then you will have to install a kernel available on the alternative link given above. Make sure that your DKMS Modules are updated and you install linux-headers before linux-image . There are also kernels available for Arch based distros (like Arch Linux and Manjaro) but you can compile it yourself if you need/want to. This firmware is available in /usr/share/firmware/wifi in macOS Big Sur installations, or online at https://github.com/AdityaGarg8/macOS-Big-Sur-WiFi-Firmware . If you get firmware from macOS, make sure that if the files are aliases, that you right click on them, and select \"Show Original\" to get the actual files. If your model identifier is 16,1 you can take a shortcut and get the firmware files from https://github.com/AdityaGarg8/mbp-16.1-wifi-firmware by following the instructions given there. If you unable to get working firmware files from there then follow the instructions given for other models.","title":"Big Sur Firmware"},{"location":"guides/wifi/#compiling-a-kernel-for-using-big-sur-firmware","text":"Follow the kernel compiling guide , but make sure to use https://github.com/jamlam/mbp-16.1-linux-wifi instead of https://github.com/aunali1/linux-mbp-arch as the patchset repository.","title":"Compiling a kernel for using Big Sur firmware"},{"location":"guides/wifi/#renaming-firmware","text":"Rename the .trx \"Firmware\" file to brcmfmac4364-pcie.bin , but change 4364 to your wifi chipset number. Do the same for the .clmb \"Regulatory\" file and rename it to brcmfmac4364-pcie.clm_blob . Again, change 4364 to your chipset number. Lastly, rename the .txt \"NVRAM\" file to brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt but in addition to changing 4364 to your chipset number, change MacBookPro15,1 to your Model Identifier.","title":"Renaming Firmware"},{"location":"guides/wifi/#installing-firmware","text":"Now that you got those 3 files, move them to /lib/firmware/brcm/ . Check that the files are in place with ls -l /lib/firmware/brcm|grep -E \"43(64|55|77)\" . The output should look something like this -rw-r--r--. 1 root root 12860 Mar 1 12:44 brcmfmac4364-pcie.Apple Inc.-MacBookPro15,1.txt -rw-r--r--. 1 root root 922647 Mar 1 12:44 brcmfmac4364-pcie.bin -rw-r--r--. 1 root root 33226 Mar 1 12:44 brcmfmac4364-pcie.clm_blob You can now test out if the files work by running sudo modprobe -r brcmfmac && sudo modprobe brcmfmac and looking at the list of wifi access points nearby. You can optionally check the logs to confirm correct loading of the firmware using sudo journalctl -k --grep=brcmfmac , the output should look similar to this May 09 11:55:54 hostname kernel: usbcore: registered new interface driver brcmfmac May 09 11:55:54 hostname kernel: brcmfmac 0000:03:00.0: enabling device (0000 -> 0002) May 09 11:55:54 hostname kernel: brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4364-pcie for chip BCM4364/3 May 09 11:55:55 hostname kernel: brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4364-pcie for chip BCM4364/3 May 09 11:55:55 hostname kernel: brcmfmac: brcmf_c_preinit_dcmds: Firmware: BCM4364/3 wl0: Oct 23 2019 08:32:36 version 9.137.11.0.32.6.36 FWID 01-671ec60c","title":"Installing Firmware"},{"location":"guides/wifi/#fixing-unstable-wpa2-using-iwd","text":"Using iwd is technically not needed for using wifi. But if your are facing unstable WPA2 issues and have to follow step 3 of the above section every time you connect to a WPA2 network, you will have to follow this section. If your connection is stable, you needn't follow this section. Instructions in this section might be different for the distribution that you are trying to install. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Some users have experienced issues with iwd Refer to warnings for iwd version incompatibilities Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd). sudo systemctl enable --now iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advised to restart iwd: sudo systemctl restart iwd , or reprobe the wifi kernel module: sudo modprobe -r brcmfmac && sudo modprobe brcmfmac .","title":"Fixing unstable WPA2 using iwd"},{"location":"guides/wifi/#fixing-suspend-on-models-with-bcm4377","text":"Models with BCM4377 may have WiFi stop working after suspending. It can be fixed but only when using the s2idle sleep state, which doen't save as much power as normal suspend. To use the s2idle sleep state, add this to /etc/systemd/sleep.conf : [Sleep] SuspendState = freeze AllowHibernation = no Then to make wifi work after resuming from s2idle , create /lib/systemd/system-sleep/bcm4377-suspend.sh with the following contents: #!/bin/sh PATH = /sbin:/usr/sbin:/bin:/usr/bin case \" $1 \" in pre ) echo \"Prevent D3cold on 'brcmfmac' devices for $2 ...\" | tee -a /var/log/suspend-brcm.log find /sys/bus/pci/drivers/brcmfmac/ | awk -F/ '{print $NF}' | grep -P '^[0-9a-f:.]+$' | while read dev ; do echo 0 > \"/sys/bus/pci/devices/ $dev /d3cold_allowed\" ; done echo \"RF block on 'brcmfmac' devices for $2 ...\" | tee -a /var/log/suspend-brcm.log find /sys/bus/pci/drivers/brcmfmac/ | awk -F/ '{print $NF}' | grep -P '^[0-9a-f:.]+$' | while read dev ; do find \"/sys/bus/pci/devices/ $dev /ieee80211/\" | grep -P '/phy\\d+/rfkill\\d+/soft$' ; done | while read rfkillsoft ; do echo 1 > \" $rfkillsoft \" ; done ;; post ) echo \"RF unblock on 'brcmfmac' devices for $2 ...\" | tee -a /var/log/suspend-brcm.log find /sys/bus/pci/drivers/brcmfmac/ | awk -F/ '{print $NF}' | grep -P '^[0-9a-f:.]+$' | while read dev ; do find \"/sys/bus/pci/devices/ $dev /ieee80211/\" | grep -P '/phy\\d+/rfkill\\d+/soft$' ; done | while read rfkillsoft ; do echo 0 > \" $rfkillsoft \" ; done ;; esac exit 0 Make it executable with sudo chmod +x /lib/systemd/system-sleep/bcm4377-suspend.sh .","title":"Fixing suspend on models with BCM4377"},{"location":"guides/windows/","text":"Introduction \u00b6 This page is a guide on getting Windows and Linux both installed. Secure Boot Must be disabled from macOS recovery. If you want to be able to choose from macOS, Windows, or Linux in the Startup Manager (the menu you get by holding \u2325 key), goto 'Using seperate EFI partitions'. If you just want to select between Linux and Windows in the GRUB bootloader, goto 'Using the same EFI partition'. The simplist way to triple boot is to install Windows first, and install linux on the same EFI partition, so that the Windows option in Startup Manager will let you pick Linux or Windows. To do that, follow the first set of instructions here. Using the same EFI partition \u00b6 If Windows is installed first \u00b6 Install linux normally, with a patched kernel and dkms modules (this is probably done for you if you are using an installer specific to t2 macs). Put your bootloader on /dev/nvme0n1p1 , which should be set to mount at /boot/efi . Once it installs the bootloader, the Windows entry in startup manager will boot linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). Open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. If Linux is installed first \u00b6 Make sure that your linux partitions are not labled as Microsoft Basic Data , if they are, Bootcamp Assistant will think Windows is already installed. To fix this, go to Linux and do sudo cfdisk /dev/nvme0n1 and change the type of your linux partitions to Linux Filesystem . Install Windows normaly with Bootcamp. Windows will replace your Linux boot option. Boot into macOS. sudo diskutil mount disk0s1 Go to /Volumes/EFI/efi In this folder there will be a Microsoft folder, an Apple folder, one with your distro's name or just GRUB , and one called Boot . The Boot folder will have a file named bootx64.efi , rename this to windows_bootx64.efi Copy the grubx64.efi file in your distro's folder to /Volumes/EFI/efi/Boot/bootx64.efi . The the Windows option in Startup Manager will now boot Linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). In Linux, open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. It may be possible to skip steps 5-8 by doing the following command in macOS: sudo sh -c \"bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/efi/$(ls /Volumes/EFI/efi|grep -i -e microsoft -e boot -e apple -v)/grubx64.efi --shortform\" This might not prevent step 8 from being needed. Using seperate EFI partitions \u00b6 Installing Linux (With or without Windows already installed) \u00b6 In macOS \u00b6 Create partitions with Disk Utility: Make a 200Mb FAT32 partition, call it something like EFI2 . Make sure there is no space in the label else you may face issues with the Startup Manager guide . Eg:- Do not use EFI 2 . Also do not use EFI as the label. Create your main partition(s) for Linux, make them macOS Extended/HFS+ to stop Bootcamp Installer from thinking they are Windows. These will be erased and reformatted by your installer. In your distro's installer \u00b6 If you are using an interactive installer: Set the EFI2 partition to be mounted at /boot/efi and set it as \"ESP\"/\"Boot\"/\"EFI System Partition\". Don't use the partition labeled EFI located at /dev/nvme0n1p1 , to avoid breaking the Windows bootloader stored there. Ensure that /dev/nvme0n1p1 wasn't set by default to be used as the \"EFI System Partition\". Ubuntu On Ubuntu you will need to right click on nvme0n1p1 , click edit/change, and set it as \"Do not use this partition\". Then you can set /boot/efi as the mount point for the EFI2 partition. Your main partition that were formatted as macOS Extended/HFS+ can be mounted at / . If it fails to install the bootloader, open a terminal: Use lsblk or mount to find where your install's root partition is installed chroot $that_partitions_mount_point_here grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. Once you've booted into linux, ensure that /dev/nvme0n1p1 is not mounted. (i.e. by checking the output of lsblk or using a disk utility program.) If it is, then edit /etc/fstab and remove it. Restart and it should no longer be mounted. If you want a more descriptive guide regarding this, go here . If you are doing it manually: Format the main Linux partition(s) as ext4, btrfs, or whatever you intend to use. Mount your partitions, put the EFI2 one at /boot/efi within your chroot. Install normally up until you install your bootloader, but don't forget to get a patched kernel and the correct dkms modules Within your chroot, do grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. Installing Windows when Linux is installed \u00b6 If there are partitions labeled as Microsoft Basic Data , Bootcamp Assistant will think you have Windows installed. Use sudo cfdisk /dev/nvme0n1 to change your Linux partitions to Linux Filesystem or whatever is appropriate. If your second EFI partition is labeled as EFI System , you'll need to use cfdisk again to make it not that, as the Windows installer fails if there are two. Bootcamp should install Windows normally. If you put your Linux bootloader on /dev/nvme0n1p1 , Windows will replace it, and that's why a second EFI partition is ideal.","title":"Windows Triple Boot"},{"location":"guides/windows/#introduction","text":"This page is a guide on getting Windows and Linux both installed. Secure Boot Must be disabled from macOS recovery. If you want to be able to choose from macOS, Windows, or Linux in the Startup Manager (the menu you get by holding \u2325 key), goto 'Using seperate EFI partitions'. If you just want to select between Linux and Windows in the GRUB bootloader, goto 'Using the same EFI partition'. The simplist way to triple boot is to install Windows first, and install linux on the same EFI partition, so that the Windows option in Startup Manager will let you pick Linux or Windows. To do that, follow the first set of instructions here.","title":"Introduction"},{"location":"guides/windows/#using-the-same-efi-partition","text":"","title":"Using the same EFI partition"},{"location":"guides/windows/#if-windows-is-installed-first","text":"Install linux normally, with a patched kernel and dkms modules (this is probably done for you if you are using an installer specific to t2 macs). Put your bootloader on /dev/nvme0n1p1 , which should be set to mount at /boot/efi . Once it installs the bootloader, the Windows entry in startup manager will boot linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). Open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader.","title":"If Windows is installed first"},{"location":"guides/windows/#if-linux-is-installed-first","text":"Make sure that your linux partitions are not labled as Microsoft Basic Data , if they are, Bootcamp Assistant will think Windows is already installed. To fix this, go to Linux and do sudo cfdisk /dev/nvme0n1 and change the type of your linux partitions to Linux Filesystem . Install Windows normaly with Bootcamp. Windows will replace your Linux boot option. Boot into macOS. sudo diskutil mount disk0s1 Go to /Volumes/EFI/efi In this folder there will be a Microsoft folder, an Apple folder, one with your distro's name or just GRUB , and one called Boot . The Boot folder will have a file named bootx64.efi , rename this to windows_bootx64.efi Copy the grubx64.efi file in your distro's folder to /Volumes/EFI/efi/Boot/bootx64.efi . The the Windows option in Startup Manager will now boot Linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). In Linux, open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. It may be possible to skip steps 5-8 by doing the following command in macOS: sudo sh -c \"bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/efi/$(ls /Volumes/EFI/efi|grep -i -e microsoft -e boot -e apple -v)/grubx64.efi --shortform\" This might not prevent step 8 from being needed.","title":"If Linux is installed first"},{"location":"guides/windows/#using-seperate-efi-partitions","text":"","title":"Using seperate EFI partitions"},{"location":"guides/windows/#installing-linux-with-or-without-windows-already-installed","text":"","title":"Installing Linux (With or without Windows already installed)"},{"location":"guides/windows/#in-macos","text":"Create partitions with Disk Utility: Make a 200Mb FAT32 partition, call it something like EFI2 . Make sure there is no space in the label else you may face issues with the Startup Manager guide . Eg:- Do not use EFI 2 . Also do not use EFI as the label. Create your main partition(s) for Linux, make them macOS Extended/HFS+ to stop Bootcamp Installer from thinking they are Windows. These will be erased and reformatted by your installer.","title":"In macOS"},{"location":"guides/windows/#in-your-distros-installer","text":"If you are using an interactive installer: Set the EFI2 partition to be mounted at /boot/efi and set it as \"ESP\"/\"Boot\"/\"EFI System Partition\". Don't use the partition labeled EFI located at /dev/nvme0n1p1 , to avoid breaking the Windows bootloader stored there. Ensure that /dev/nvme0n1p1 wasn't set by default to be used as the \"EFI System Partition\". Ubuntu On Ubuntu you will need to right click on nvme0n1p1 , click edit/change, and set it as \"Do not use this partition\". Then you can set /boot/efi as the mount point for the EFI2 partition. Your main partition that were formatted as macOS Extended/HFS+ can be mounted at / . If it fails to install the bootloader, open a terminal: Use lsblk or mount to find where your install's root partition is installed chroot $that_partitions_mount_point_here grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. Once you've booted into linux, ensure that /dev/nvme0n1p1 is not mounted. (i.e. by checking the output of lsblk or using a disk utility program.) If it is, then edit /etc/fstab and remove it. Restart and it should no longer be mounted. If you want a more descriptive guide regarding this, go here . If you are doing it manually: Format the main Linux partition(s) as ext4, btrfs, or whatever you intend to use. Mount your partitions, put the EFI2 one at /boot/efi within your chroot. Install normally up until you install your bootloader, but don't forget to get a patched kernel and the correct dkms modules Within your chroot, do grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux.","title":"In your distro's installer"},{"location":"guides/windows/#installing-windows-when-linux-is-installed","text":"If there are partitions labeled as Microsoft Basic Data , Bootcamp Assistant will think you have Windows installed. Use sudo cfdisk /dev/nvme0n1 to change your Linux partitions to Linux Filesystem or whatever is appropriate. If your second EFI partition is labeled as EFI System , you'll need to use cfdisk again to make it not that, as the Windows installer fails if there are two. Bootcamp should install Windows normally. If you put your Linux bootloader on /dev/nvme0n1p1 , Windows will replace it, and that's why a second EFI partition is ideal.","title":"Installing Windows when Linux is installed"}]}